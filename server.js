const http = require('http');
const express = require('express');
const app = express();
app.get("/", (request, response) => {
  response.sendStatus(200);
});
app.listen(process.env.PORT);
setInterval(() => {
  http.get(`http://infe-myst.glitch.me/`);
}, 280000);


//facsions
let funcs = {

  generateInt: (low, high) => {
    return Math.floor(Math.random() * (high - low + 1) + low);
  },
  getLevelFromExp: (exp) => {
    let level = 0;

        while (exp >= funcs.getLevelExp(level)) {
            exp -= funcs.getLevelExp(level);
            level++;
        }

        return level;
  },
  getLevelExp: (level) => {
    return 5 * (Math.pow(level, 2)) + 50 * level + 100;
  }

}

const SQLite = require('sqlite'); // SQLite Package to read & write to sql files and databases
const Discord = require('discord.js');
const devs = ['565913860884660249', '298230144357761032', '352173490276663307'];//{348953140315291649}Me
const db = require('quick.db');
const premium = ['565913860884660249'];
const client = new Discord.Client();   
const bot = new Discord.Client();   
const giphy = require('giphy-api')();    
const googl = require('goo.gl');  
const path = require('path'); // Path Package to get paths easily
const translate = require('google-translate-api');   
const fs = require("fs"); 
const Canvas = require("canvas");
const getYoutubeID = require('get-youtube-id'); 
const moment = require("moment");  
const { Client, Util } = require('discord.js');  
const UserBlocked = new Set(); 
const jimp = require('jimp');   
const math = require('math-expression-evaluator'); 
const stripIndents = require('common-tags').stripIndents;
const figlet = require('figlet');
const google = require('google-it'); 
const queue = new Map(); 
const zalgo = require('zalgolize');   
const fetchVideoInfo = require('youtube-info');
const YouTube = require('simple-youtube-api');
const ytdl = require('ytdl-core');
const yt_api_key = "AIzaSyCoQvWcvF2v6HZk03pp39Bpce-ByG2jAvI";
const youtube = new YouTube("AIzaSyA3CUhzUCYKRUq3gA3UxqC56_rmaSMZC5c");
const sql = require("sqlite");
const dateFormat = require('dateformat'); 
const ms = require('parse-ms'); // parse-ms Package to format ms to somethings
const pretty = require('pretty-ms') 
const {prefix} = require ('./prefix');
var table = require('table').table
var ti={}  
,spee={}
,attentions={};

client.on('ready', function(){
    var ms = 900 ;
    var setGame = [`${client.guilds.size} Server`,'$help','$contact',`${client.users.size} Members`,'I Love U'];
    var i = -1;
    var j = 0;
    setInterval(function (){
        if( i == -1 ){
            j = 1;
        }
        if( i == (setGame.length)-1 ){
            j = -1;
        }
        i = i+j;
        client.user.setGame(setGame[i],`http://www.twitch.tv/n3k4a`);
    }, ms);
    console.log(` -|> Name: ${client.user.username}`);
 console.log(` s> Servers: ${client.guilds.size}`);
 console.log(` h |> Members: ${client.users.size}`);
 console.log(` a |> Channels: ${client.channels.size}`);
 console.log(` d|> Channels: ${client.channels.size}`);
 console.log(` o|> Id: ${client.user.id}`);
 
  console.log(` g|`)
 console.log(` -`);
});


client.on("message", message => {
  if (message.author.bot) return;
  if (!message.content.startsWith(prefix)) return;
  if (message.content.startsWith(prefix + "help")) {
    let embed = new Discord.RichEmbed()
      .setColor("BLACK")
      .setAuthor(client.user.tag, client.user.avatarURL)
      .setDescription(`
ุจูุช ูุชุนุฏุฏ ุงูุฎุตุงุฆุต
ุตูุงูุฉ ููููุฉ. ุดูุฑุงู ููุชูุตูู ุงูุจูุช ู500 ุณูุฑูุฑ
ุณูุฑูุฑ ุงูุจูุช
`);
    message.channel.send(embed).then(async msg => {
      msg.react("๐ค");
      msg.react("๐ฅ");
      msg.react("๐ถ");
      msg.react("๐");
      msg.react("๐ฎ");
      msg.react("โจ");
      const ad = msg.createReactionCollector(
        (reaction, user) =>
          reaction.emoji.name == "๐ค" && user.id == message.author.id,
        { time: 86400000 }
      );
      const p = msg.createReactionCollector(
        (reaction, user) =>
          reaction.emoji.name == "๐ฅ" && user.id == message.author.id,
        { time: 86400000 }
      );
      const m = msg.createReactionCollector(
        (reaction, user) =>
          reaction.emoji.name == "๐ถ" && user.id == message.author.id,
        { time: 86400000 }
      );
      const s = msg.createReactionCollector(
        (reaction, user) =>
          reaction.emoji.name == "๐" && user.id == message.author.id,
        { time: 86400000 }
      );
      const g = msg.createReactionCollector(
        (reaction, user) =>
          reaction.emoji.name == "๐ฎ" && user.id == message.author.id,
        { time: 86400000 }
      );
      const pl = msg.createReactionCollector(
        (reaction, user) =>
          reaction.emoji.name == "โจ" && user.id == message.author.id,
        { time: 86400000 }
      );
      ad.on("collect", async r => {
        await r.remove(message.author);
        let embe = new Discord.RichEmbed()
          .setColor("BLACK")
          .setAuthor(client.user.tag, client.user.avatarURL).setDescription(`
**   
       
${prefix}move @user x}move @user |ูุณุญุจ ุงูุดุฎุต ุงูู ุฑูููู
${prefix}role @user <rank> |ูุฃุนุทุงุก ุฑุชุจุฉ ูุนุถู ูุนูู
${prefix}roleremove @user <rank> |ูุงุฒุงูุฉ ุงูุฑุชุจุฉ ูู ุดุฎุต ูุนูู
${prefix}give all <rank> |ูุฃุนุทุงุก ุฑุชุจุฉ ููุฌููุน
${prefix}give humans <rank> |ูุฃุนุทุงุก ุฑุชุจุฉ ููุงุดุฎุงุต ููุท
${prefix}give bots <rank> |ูุฃุนุทุงุก ุฑุชุจุฉ ูุฌููุน ุงูุจูุชุงุช
${prefix}hchannel |ุงุฎูุงุก ุงูุดุงุช
${prefix}schannel |ุงุถูุงุฑ ุงูุดุงุช ุงููุฎููุฉ
${prefix}clear |ูุณุญ ุงูุดุงุช
${prefix}mute @user <time> |ุงุนุทุงุก ุงูุนุถู ูููุช 
${prefix}unmute @user |ููู ุงููููุช ุนู ุงูุดุฎุต 
${prefix}kick @user <reason> |ุทุฑุฏ ุงูุดุฎุต ูู ุงูุณูุฑูุฑ
${prefix}ban @user <reason> |ุญุถุฑ ุงูุดุฎุต ูู ุงูุณูุฑูุฑ
${prefix}mc |ุชูููู ุงูุดุงุช
${prefix}showAll|ุงุถูุงุฑ ุฌููุน ุงูุฑููุงุช ูู ุงูุณูุฑูุฑ
${prefix}hideAll|ุงุฎูุงุก ุฌููุน ุงูุฑููุงุช ูู ุงูุณูุฑูุฑ
${prefix}uc |ูุชุญ ุงูุดุงุช
${prefix}dr | <ูุณุญ ูู ุงูุฑุงููุงุช <ูุงุฒู ุชููู ุฑุงูู ุงูุจูุช ููู ูู ุงูุฑุงููุงุช
${prefix}ct <name> | ุงูุดุงุก ุดุงุช
${prefix}cv <name> | ุงูุดุงุก ุฑููู ูููุณ
${prefix}temp | ูุงูุดุงุก ุฑูู ูุคูุช
${prefix}delet <name> | ูุณุญ ุงูุดุงุช ุงู ุงูุฑููู ูููุณ
${prefix}deletecolors| ุฅุฒุงูุฉ ุฌููุน ุงูุงููุงู
${prefix}make <number> | ููุดุง ูู ุงููุงู ูุน ูู ุงููุงู ุชุจู
${prefix}color <number> / ูุฎุชูุงุฑ ููู
${prefix}setrole |  ููุถุน ุงูุฃูุชู ุฑูู
${prefix}dautorole |  ูุญุฐู ุงูุฃูุชู ุฑูู
${prefix}currentrole |  ูุนููู ูุด ุงูุฃูุชู ุฑูู
${prefix}setmessage |  ูุญุท ูุณุฌ ูุฑุณู ูู ุงูุดุฎุต ูู ุงูุฎุงุต ุนูุฏ ุงูุฏุฎูู
${prefix}dmessage |  ูุญุฐู ุฑุณุงูุฉ ุงูุชุฑุญูุจ ูู ุงูุฎุงุต
$rolebc <everyone or @role>|  ุฑุงุณุงู ุฑุณุงูู ุฌูุงุนูู ูุฑุชุจู ูุญุฏุฏู
${prefix}setRoleโautrole reaction

**
`);
        msg.edit(embe);
      });
      p.on("collect", async r => {
        await r.remove(message.author);
        let embe = new Discord.RichEmbed()
          .setColor("BLACK")
          .setAuthor(client.user.tag, client.user.avatarURL).setDescription(`
**${prefix}server|ูุนุฑุถ ูู ูุนูููุงุช ุนู ุงูุณูุฑูุฑ
${prefix}bot|ูุนุฑุถ ูู ูู ูุนูููุงุช ุงูุจูุช 
${prefix}count|ูุนุฑุถ ูู ุนุฏุฏ ุงูุงุดุฎุงุต ุจุงูุณูุฑูุฑ ุจุฏูู ุจูุชุงุช
${prefix}invites|ูุนุฑุถ ูู  ุนุฏุฏ ุงููุงูุชุงุชู ุจุงูุณูุฑูุฑ 
${prefix}invinfo <invitelink here>|ููุนูููุงุช ุนู ุงูุฏุนูู
 ูุซุงู : invinfo m82n8P
${prefix}invite-codes|ูุนุฑุถ ูู ุฑูุงุจุท ุงูุงููุงูุชุงุช ุญูู ูู ุงูุณูุฑูุฑ 
${prefix}report|
${prefix}cal|ุงูู ุญุงุณุจุฉ
${prefix}trans <language> <any thing>|ูุชุฑุฌู ูู ุงูู ุชุจูู ูู ุงู ูุบุฉ
${prefix}short|ูุฎุชุตุฑ ูู ุฑุงุจุท ูุจูุฑ ุงูู ุฑุงุจุท ุตุบูุฑ
${prefix}tag|ููุชุจ ูู ุงููููุฉ ุจุดูู ุฌููู ููุจูุฑ
${prefix}perms|ูุนุฑุถ ูู ุจุฑูุดูุงุชู ุจุงูุณูุฑูุฑ
${prefix}z5rf|ูุฒุฎุฑู ูู ูููุฉ ุงู ุฌููุฉ
${prefix}rooms|ูุนุฑุถ ูู ูู ุงูุฑููุงุช ุงูู ุจุงูุณูุฑูุฑ ูุน ุนุฏุฏูุง
${prefix}roles|ูุนุฑุถ ูู ูู ุงูุฑุงููุงุช ุจุงูุณูุฑูุฑ ุจุดูู ุฌููู
${prefix}emojilist|ูุนุฑุถ ูู ูู ุงูุงูููุฌูุงุช ุงูู ุจุงูุณูุฑูุฑ
${prefix}say|ููุฑุฑ ุงูููุงู ุงูู ุชูุชุจู
${prefix}image|ุตูุฑุฉ ุงูุณูุฑูุฑ
${prefix}members|ุนุฑุถ ูู ุนุฏุฏ ูู ุญุงูุงุช ุงูุงุดุฎุงุต ูุนุฏุฏ ุงูุจูุชุงุช ูุนุฏุฏ ุงูุงุดุฎุงุต
${prefix}id|ูุนูููุงุช ุนูู
${prefix}bans |ุนุฏุฏ ุงูุงุดุฎุงุต ุงููุจูุฏุฉ 
${prefix}avatar|ุตูุฑุชู ุงู ุตูุฑุฉ ุงูู ุชููุดูู
${prefix}embed|ููุฑุฑ ุงูู ุชูููู ุจุดูู ุญูู
${prefix}emoji <any things>|ูุชุญููู ุงู ูููู ุชููููุง ุงูู ุงูููุฌู
${prefix}contact|ุงุฑุณุงู ุงูุชุฑุงุญ ุงู ููุฑุงุณูุฉ ุตุงุญุจ ุงูุจูุช
${prefix}support|ุณูุฑูุฑ ุงูุฏุนู
${prefix}inv|ูุฏุนูุฉ ุงูุจูุช ุงูู ุณูุฑูุฑู
${prefix}voicerank|ูุนุฑุถ ุชูุงุฌุฏู ูู ุงูุฑููุงุช ุงูุตูุชูู
**
    `);
        msg.edit(embe);
      });
      m.on("collect", async r => {
        await r.remove(message.author);
        let embe = new Discord.RichEmbed()
          .setColor("BLACK")
          .setAuthor(client.user.tag, client.user.avatarURL).setDescription(`
**
${prefix}play โ ูุชุดุบูู ุฃุบููุฉ ุจุฑุขุจุท ุฃู ุจุฃุณู
${prefix}skip โ ูุชุฌุขูุฒ ุงูุฃุบููุฉ ุงูุญุขููุฉ
${prefix}pause โุฅููุขู ุงูุฃุบููุฉ ูุคูุชุง
${prefix}resume โ ูููุขุตูุฉ ุงูุฅุบููุฉ ุจุนุฏ ุฅููุขููุข ูุคูุชุง
${prefix}vol โ ูุชุบููุฑ ุฏุฑุฌุฉ ุงูุตูุช 100 - 0
${prefix}stop โ ูุฅุฎุฑุขุฌ ุงูุจูุช ูู ุงูุฑูู
${prefix}np โ ููุนุฑูุฉ ุงูุฃุบููุฉ ุงููุดุบูุฉ ุญุขููุง
${prefix}queue โ ููุนุฑูุฉ ูุขุฆูุฉ ุงูุชุดุบูู
${prefix}repeat โ ุชูุฑุงุฑ ุงูุงุบููุฉ 
**
`);
        msg.edit(embe);
      });
      s.on("collect", async r => {
        await r.remove(message.author);
        let embe = new Discord.RichEmbed()
          .setColor("BLACK")
          .setAuthor(client.user.tag, client.user.avatarURL).setDescription(`
**
${prefix}settings limitsban / ูุชุบูุฑ ุนุฏุฏ ุงูุชุจูุฏ  ููููู ุชุบูุฑู
${prefix}settings limitskick / ูุชุบูุฑ ุนุฏุฏ ุงูููู ููููู ุชุบูุฑู
${prefix}settings limitsroleD / ูุชุบูุฑ ุนุฏุฏ ุญุฐู ุงูุฑุชุจ ููููู ุชุบูุฑู
${prefix}settings limitsroleC / ูุชุบูุฑ ุนุฏุฏ ุตูุน ุงูุฑุชุจ ููููู ุชุบูุฑู
${prefix}settings limitschannelD / ูุชุบูุฑ ุนุฏุฏ ุตูุน ุงูุฑููุงุช ููููู ุชุบูุฑู
${prefix}settings limitstime / ูุชุบูุฑ ููุช ุงูุงูุงูุฑ  ููููู ุชุบูุฑู
${prefix}setLog / ูุชุญุฏูุฏ ุฑูู ุงูููู
${prefix}toggleLog / ูุชูุนูู ุฎุงุตูุฉ ุงูููู
${prefix}antibots off/ุชูุนูู ุฏุฎูู ุงูุจูุชุงุช
${prefix}antibots on/ููุน ุฏุฎูู ุงูุจูุชุงุช
**
`);
        msg.edit(embe);
      });
      g.on("collect", async r => {
        await r.remove(message.author);
        let embe = new Discord.RichEmbed()
          .setColor("BLACK")
          .setAuthor(client.user.tag, client.user.avatarURL).setDescription(`
**${prefix}rps โ ุญุฌุฑ ูุฑูุฉ ููุต
${prefix}speed โ ุงุณุฑุน ูุชุงุจุฉ
${prefix}quas โ ุงุณุฆูุฉ ุนุงูุฉ
${prefix}fortniteโููุฏ ุงุณุฆูุฉ ููุฑุชููุงู
${prefix}drakeโูุนุจุฉ ูู ููุน ุงุฎุฑ
${prefix}catโgif
${prefix}pokeโgif
${prefix}patโgif
${prefix}hug โgif
${prefix}slapโgif
${prefix}cuddleโgif
${prefix}tickleโgif
${prefix}ููุช โ ููุช 
${prefix}ูุนุจุฉ ููู โ ููู
${prefix}ุนูุงุตู ุนุดูุงุฆูโุนูุงุตู
${prefix}ูุนุจุฉ ูุช ุชููุช โ ูุช ุชููุช
${prefix}roll <number> โ ูุฑุนุฉ
${prefix}ูู ุฎูุฑูู ุจุทุฑููุฉ ุญููุฉ โ ูู ุฎูุฑูู
${prefix}ูุนุจุฉ ูุฑูู โ ูุฑูู
${prefix}ููุงุฆุฏ ููุตุงุฆุญ  โ ูู ุชุนูู
${prefix}ูุนุทูู ุนูุงุจุงุช ูุงุณูุฉ โ ุนูุงุจ 
**
=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.
`);

        msg.edit(embe);
      });
      pl.on("collect", async r => {
        await r.remove(message.author);
        let embe = new Discord.RichEmbed()
          .setColor("BLACK")
          .setAuthor(client.user.tag, client.user.avatarURL).setDescription(`
**
${prefix}[create server Shopโ ุงูุดุงุก ุณูุฑูุฑ ุดูุจ  
${prefix}server game roomโ ุงูุดุงุก ุฑููุงุช ุงูุนุงุจ  
${prefix}server shop roleโุงูุดุงุก ุฑููุงุช ุดูุจ
${prefix}ceroleโุงูุดุงุก ุฑููุงุช ุนุงุฏูุฉ]
${prefix}start-giveaway
${prefix}reroll-giveaway
${prefix}end-giveaway
${prefix}1setReplyโ
${prefix}2setReplyโ
${prefix}3setReplyโ
${prefix}autoreply1 offโ
${prefix}autoreply2 offโ
${prefix}autoreply3 offโ


**
`);
        msg.edit(embe);
      });
    });
  }
});
client.on("message", message => {
  if (!message.guild || message.author.bot) return;
  if (message.content.startsWith(prefix + "hideAll")) {
    message.guild.channels.forEach(channel => {
      channel.overwritePermissions(message.guild.id, {
        READ_MESSAGES: false
      });
    });
    message.channel.send("**Successfully**");
  } else if (message.content.startsWith(prefix + "showall")) {
    var arg = message.content.split(" ")[1];
    if (arg && arg == "all") {
      message.guild.channels.forEach(channel => {
        channel.overwritePermissions(message.guild.id, {
          READ_MESSAGES: true
        });
      });
    } else {
      var member = message.mentions.members.first();
      if (!member) return message.channel.send("**Mention a member.**");
      message.guild.channels.forEach(channel => {
        channel.overwritePermissions(member.id, {
          READ_MESSAGES: true
        });
      });
      message.channel.send("**Successfully**");
    }
  }
});
client.on("message", async message => {
  if (message.author.bot) return;
  let command = message.content.split(" ")[0].slice(prefix.length);
  let args = message.content.split(" ").slice(1);
  if (!message.content.toLowerCase().startsWith(prefix)) return;

  if (command == "deletecolors") {
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(`ูุงุชูุชูู ุงูุตูุงุญูุงุช ููุนู ุฐูู! โ`);
    message.channel.send("ุฌุงุฑู ุงููุณุญ..").then(async m => {
      await message.guild.roles.forEach(role => {
        if (/^\d+$/gi.test(role.name)) {
          role.delete();
        }
      });
      m.edit(`ุชู ุฅุฒุงูุฉ ุฌููุน ุงูุงููุงู.`);
    });
  }
});
client.on("message", message => {
  var prefixMention = new RegExp(`^<@!?${client.user.id}>( |)$`);
  if (message.content.match(prefixMention)) {
    return message.reply(`My prefix is \`${prefix}\``);
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "inv")) {
    if (!message.channel.guild)
      return message.channel.send("This Command is Just For Servers!");
    message.react("๐");
    var embed = new Discord.RichEmbed()
      .setTitle(">> ClickHere To Add" + ` ${client.user.username}` + " <<")
      .setURL(
        "https://discordapp.com/api/oauth2/authorize?client_id=" +
          `${client.user.id}` +
          "&permissions=8&scope=bot"
      ) //https://discordapp.com/api/oauth2/authorize?client_id=637757928673247262&permissions=8&scope=bot
      .setTimestamp()
      .setFooter(`Requested By | ${message.author.username}`)
      .setColor("RANDOM");
    message.author.send({ embed });
  }
});
client.codes = require("./code.json");

client.on("guildMemberAdd", member => {
  //ูุฐู ููู ูุณุชูู ุงูุดุฎุต ูุฏุฎู ุงูุณูุฑูุฑ ุนุดุงู ูุนุทูู ุงูุฑุชุจุฉ
  console.log(member.user.username + " Joined " + member.guild.name);
  if (client.codes[member.guild.id] === undefined)
    return console.log("Use the setrole command");
  let role = client.codes[member.guild.id].role;
  let roletogive = member.guild.roles.get(`${role}`);
  if (!roletogive)
    return console.log(
      `please use ${prefix}setrole ROLEMENTION or make sure that the bot role is higher than the auto role`
    );
  client.guilds
    .get(`${client.codes[member.guild.id].guild}`)
    .member(member)
    .addRole(roletogive);
  let Hello = client.codes[member.guild.id].message;
  if (Hello === null) return;
  member
    .send(`${Hello}`)
    .catch(err => console.log(`No message to send! or ${err}`));
});
client.on("message", async message => {
  let messageArray = message.content.split(" ");
  let msg = message;
  let cmd = messageArray[0];
  let args = messageArray.slice(1);
  if (!message.content.startsWith(prefix)) return;

  if (cmd === `${prefix}setrole`) {
    // ูุฐุง ุงูู ูุญุทูู ุงูุฃูุชู ุฑูู ููุฎุฒูู ุจููู ุฌุณูู ุงูู ุณูููุงู ูู ุงูุจุฏุงูุฉ ุจุฏููู ู ุฑุญ ููุฏูู ุชุณุชุฎุฏู ุงู ูููุงูุฏ ุซุงูู
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(
        "**You cannot use this command , you do not have Administration**"
      ); //ูุฐู ุจูุฎูููุง ูู ูุง ูุนู ุงุฏููุณุชุฑูุดู ุฐู
    var role =
      message.mentions.roles.first() || message.guild.roles.get(args[0]);
    if (!role) return message.channel.send("Please specify a role ...");
    client.codes[message.guild.id] = {
      message: null,
      role: role.id,
      guild: message.guild.id
    };
    fs.writeFile("./code.json", JSON.stringify(client.codes, null, 4), err => {
      console.log(err);
      message.channel.send(`Done!`);
    });
  }
  if (cmd === `${prefix}dautorole`) {
    //ูุฐุง ููุณุญูู ุงูุฃูุชู ุฑูู
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(
        "**You cannot use this command , you do not have Administration**"
      ); //ูุฐู ุจูุฎูููุง ูู ูุง ูุนู ุงุฏููุณุชุฑูุดู ุจูุฑุณูู ุงูุฑุณุงูุฉ ุฐู
    if (client.codes[message.guild.id] === undefined)
      return message.channel.send("**There's no autorole to delete**");
    delete client.codes[message.guild.id];
    fs.writeFile("./code.json", JSON.stringify(client.codes, null, 4), err => {
      console.log(err);
    });
    message.channel.send("Done! autorole deleted =)");
  }
  if (cmd === `${prefix}currentrole`) {
    //ูุฐุง ูุนููู ูุด ุงูุฃูุชู ุฑูู ุงูุญุงูู
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(
        "**You cannot use this command , you do not have Administration**"
      ); //ูุฐู ุจูุฎูููุง ูู ูุง ูุนู ุงุฏููุณุชุฑูุดู ุจูุฑุณูู ุงูุฑุณุงูุฉ ุฐู
    if (client.codes[message.guild.id] === undefined)
      return message.channel.send(
        `**There's no current autorole use \`${prefix}setrole\` to set one! **`
      );
    var acode = client.codes[message.guild.id].role;
    let myRole = message.guild.roles.get(acode);
    message.channel.send(`**Current Auto role is:** ${myRole.name}`);
  }

  if (cmd === `${prefix}setmessage`) {
    //ูุฐุง ุงููููุงูุฏ ูุญุทูู ูุณุฌ ุชููุงุฆู ูุฌู ููุฎุงุต ุญู ุงูุดุฎุต ุงูู ุฏุฎู
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(
        "**You cannot use this command , you do not have Administration**"
      ); //ูุฐู ุจูุฎูููุง ูู ูุง ูุนู ุงุฏููุณุชุฑูุดู ุจูุฑุณูู ุงูุฑุณุงูุฉ ุฐู
    let azoqzmsg = args.join(" ");
    if (!azoqzmsg)
      return message.channel.send(
        `**There is no message ! But if you wish to delete the auto message please use **\`${prefix}dmessage\``
      );
    if (client.codes[message.guild.id] === undefined)
      return message.channel.send(
        `**I\m Sorry but you have to use \`${prefix}setrole\` to be able to use this**`
      );
    client.codes[message.guild.id].message = azoqzmsg;
    fs.writeFile("./code.json", JSON.stringify(client.codes, null, 4), err => {
      console.log(err);

      message.channel.send(`Done!`);
    });
  }
  if (cmd === `${prefix}dmessage`) {
    //ูุฐุง ุงููููุงูุฏ ููุณุญูู ุงูุฃูุชู ูุณุฌ
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(
        "**You cannot use this command , you do not have Administration**"
      ); //ูุฐู ุจูุฎูููุง ูู ูุง ูุนู ุงุฏููุณุชุฑูุดู ุจูุฑุณูู ุงูุฑุณุงูุฉ ุฐู
    if (client.codes[message.guild.id] === undefined)
      return message.channel.send(
        `__**Sorry There's no message to deleted**__`
      );
    delete client.codes[message.guild.id].message;
    fs.writeFile("./code.json", JSON.stringify(client.codes, null, 4), err => {
      message.channel.send(`Done!`);
    });
  }
});
client.on("message", message => {
  var prefix = "$"; // ุงูุจุฑูููุณ
  if (message.content.startsWith(prefix + "server")) {
    // ุงูุงูุฑ
    if (!message.guild.member(message.author).hasPermission("ADMINISTRATOR"))
      return message.reply(`**ูุฐู ุงูุฎุงุตูุฉ ููุงุฏุงุฑุฉ ููุท** โ `);
    if (!message.channel.guild) return;
    const millis = new Date().getTime() - message.guild.createdAt.getTime();
    const now = new Date();
    dateFormat(now, "dddd, mmmm dS, yyyy, h:MM:ss TT");
    const verificationLevels = ["None", "Low", "Medium", "Insane", "Extreme"];
    const days = millis / 1000 / 60 / 60 / 24;
    let roles = client.guilds.get(message.guild.id).roles.map(r => r.name);
    var embed = new Discord.RichEmbed()
      .setAuthor(message.guild.name, message.guild.iconURL)
      .addField("**๐ Server ID:**", message.guild.id, true)
      .addField(
        "**๐ Created On**",
        message.guild.createdAt.toLocaleString(),
        true
      )
      .addField(
        "**๐ Owned by**",
        `${message.guild.owner.user.username}#${message.guild.owner.user.discriminator}`
      )
      .addField("**๐ฅ Members**", `[${message.guild.memberCount}]`, true)
      .addField(
        "**๐ฌ Channels **",
        `**${message.guild.channels.filter(m => m.type === "text").size}**` +
          " text | Voice  " +
          `**${message.guild.channels.filter(m => m.type === "voice").size}** `,
        true
      )
      .addField("**๐ Others **", message.guild.region, true)
      .addField(
        "**๐ Roles **",
        `**[${message.guild.roles.size}]** Role `,
        true
      )
      .setColor("#000000");
    message.channel.sendEmbed(embed);
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "bot")) {
    message.channel.send({
      embed: new Discord.RichEmbed()
        .setAuthor(client.user.username, client.user.avatarURL)
        .setThumbnail(client.user.avatarURL)
        .setColor("RANDOM")
        .setTitle("``INFO `` ")
        .addField(
          "``My Ping``",
          [`${Date.now() - message.createdTimestamp}` + "MS"],
          true
        )
        .addField(
          "``RAM Usage``",
          `[${(process.memoryUsage().rss / 1048576).toFixed()}MB]`,
          true
        )
        .addField("``servers``", [client.guilds.size], true)
        .addField("``channels``", `[ ${client.channels.size} ]`, true)
        .addField("``Users``", `[ ${client.users.size} ]`, true)
        .addField("``My Name``", `[ ${client.user.tag} ]`, true)
        .addField("``My ID``", `[ ${client.user.id} ]`, true)
        .addField("``My Prefix``", `[ ${prefix} ]`, true)
        .addField("``My Language``", `[ Java Script ]`, true)
        .addField("``Bot Version``", `[ 0.0.5 ]Beta`, true)
        .addField("``My owners``", `<@565913860884660249> <@298230144357761032> <@352173490276663307> `, true)
        .setFooter("By | InFeRnO Team")
    });
  }
});
client.on("message", message => {
  if (!message.channel.guild) return;
  if (message.content == prefix + "count")
    message.reply(`**${message.guild.memberCount}**`);
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "invites")) {
    message.guild.fetchInvites().then(invs => {
      let user = message.mentions.users.first() || message.author;
      let personalInvites = invs.filter(i => i.inviter.id === user.id);
      let inviteCount = personalInvites.reduce((p, v) => v.uses + p, 0);
      message.channel.send(`${user} has ${inviteCount} invites.`);
    });
  }
});
client.on("message", async message => {
  if (!message.channel.guild) return;
  if (message.content.startsWith(prefix + "invite-codes")) {
    let guild = message.guild;
    var codes = [""];
    message.channel.send(
      ":postbox: **ููุฏ ููุช ุจุฃุฑุณุงู ุฌููุน ุฑูุงุจุท ุงูุฏุนูุงุช ุงูุชู ููุช ุจุฃูุดุงุฆูุง ูู ุงูุฎุงุต**"
    );
    guild
      .fetchInvites()
      .then(invites => {
        invites.forEach(invite => {
          if (invite.inviter === message.author) {
            codes.push(`discord.gg/${invite.code}`);
          }
        });
      })
      .then(m => {
        if (codes.length < 0) {
          var embed = new Discord.RichEmbed()
            .setColor("#000000")
            .addField(
              `Your invite codes in ${message.guild.name}`,
              `You currently don't have any active invites! Please create an invite and start inviting, then you will be able to see your codes here!`
            );
          message.author.send({ embed: embed });
          return;
        } else {
          var embed = new Discord.RichEmbed()
            .setColor("#000000")
            .addField(
              `Your invite codes in ${message.guild.name}`,
              `Invite Codes:\n${codes.join("\n")}`
            );
          message.author.send({ embed: embed });
          return;
        }
      });
  }
});
client.on("message", msg => {
  if (msg.content.startsWith(prefix + "cal")) {
    let args = msg.content.split(" ").slice(1);
    const question = args.join(" ");
    if (args.length < 1) {
      msg.reply("Specify a equation, please.");
    } else {
      let answer;
      try {
        answer = math.eval(question);
      } catch (err) {
        msg.reply(`Error: ${err}`);
      }

      const embed = new Discord.RichEmbed()
        .addField("**Input**: ", `**${question}**`, true)
        .addField("**Output**: ", `**${answer}**`, true);
      msg.channel.send(embed).catch(console.error);
    }
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "trans")) {
    let toTrans = message.content.split(" ").slice(1);
    let language;

    language =
      toTrans[toTrans.length - 2] === "to"
        ? toTrans.slice(toTrans.length - 2, toTrans.length)[1].trim()
        : undefined;
    if (!language) {
      return message.reply(
        `Please supply valid agruments.\n**Example** \`${prefix}trans [text] to [language]\``
      );
    }
    let finalToTrans = toTrans
      .slice(toTrans.length - toTrans.length, toTrans.length - 2)
      .join(" ");
    translate(finalToTrans, { to: language })
      .then(res => {
        message.channel.send({
          embed: {
            color: 3447003,
            author: {
              name: "translator",
              icon_url: client.user.avatarURL
            },
            fields: [
              {
                name: "Translator",
                value: `**From:** ${res.from.language.iso}\n\`\`\`${finalToTrans}\`\`\`\n**To: **${language}\n\`\`\`${res.text}\`\`\``
              }
            ],
            timestamp: new Date(),
            footer: {
              icon_url: client.user.avatarURL
            }
          }
        });
      })
      .catch(console.error);
  }
});
client.on("message", async message => {
  const prefix = "$"; // ุงูุจุฑููุณ ุญูู

  if (message.author.bot) return;
  if (!message.guild) return;
  if (!message.content.startsWith(prefix)) return;

  const args = message.content
    .slice(prefix.length)
    .trim()
    .split(/ +/g);
  const cmd = args.shift().toLowerCase();

  if (cmd === "insta") {
    const name = args.join(" ");

    if (!name) {
      return message
        .reply(`:x: **-| Please type the name of the person in insta**`)
        .then(m => m.delete(5000));
    }

    const url = `https://instagram.com/${name}/?__a=1`;
    const res = await fetch(url).then(url => url.json());

    if (!res.graphql.user.username) {
      return message
        .reply(`:x: **-| ูุง ููุฌุฏ ุงุญุฏ ุจูุฐุง ุงูุงุณู**`)
        .then(m => m.delete(5000));
    }

    const account = res.graphql.user;

    const embed = new RichEmbed()
      .setColor("RANDOM")
      .setTitle(account.full_name)
      .setURL(account.external_url_linkshimmed)
      .setThumbnail(account.profile_pic_url_hd)
      .addField(
        "ูุนูููุงุช ุงูุจุฑููุงูู",
        stripIndents`**- Username:** \`${account.username}\`
        **- Full name:** ${account.full_name}
        **- Bio:** \`${
          account.biography.length == 0 ? "Nothing" : account.biography
        }\`
        **- Posts:** \`${account.edge_owner_to_timeline_media.count}\`
        **- Followers:** \`${account.edge_followed_by.count}\`
        **- Following:** \`${account.edge_follow.count}\`
        **- Account Private?:** ${account.is_private ? "Yes ๐" : "No ๐"}  
  `,
        true
      );

    message.channel.send(embed);
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "tag")) {
    let args = message.content.split(" ").slice(1);
    if (!args[0]) return message.reply("ูุฑุฌู ูุชุงุจุฉ ูุต ุงูุฏู ุชุฑูุฏ");

    figlet(args.join(" "), (err, data) => {
      message.channel.send("```" + data + "```");
    });
  }
});
client.on("message", message => {
  let args = message.content.split(" ").slice(1);
  if (message.content.startsWith(prefix + "google")) {
    const input = args.join(" ");

    google({ query: input, disableConsole: true })
      .then(results => {
        return message.channel.send(
          `\n\n**Title**: ${results[0].title}\n***Link***: ${results[0].link}\nDescription: ${results[0].snippet}`
        );
      })
      .catch(error => {
        if (error) throw error;
      });
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "perms")) {
    if (!message.channel.guild) return;
    var perms = JSON.stringify(
      message.channel.permissionsFor(message.author).serialize(),
      null,
      4
    );
    var zPeRms = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setTitle(":tools: Permissions")
      .addField("Your Permissions:", perms);

    message.channel.send({ embed: zPeRms });
  }
});
client.on("message", message => {
  if (message.author.bot) return;
  if (!message.content.startsWith(prefix)) return;

  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);

  let args = message.content.split(" ").slice(1);

  if (command == "z5rf") {
    let say = new Discord.RichEmbed().setTitle("Text emboss :");

    message.reply(`\n ${zalgo(args.join(" "))}`);
  }
});

client.on("message", message => {
  if (message.content === prefix + "rooms") {
    if (message.author.bot) return;
    if (!message.guild) return;

    var channels = message.guild.channels
      .map(channels => `${channels.name}, `)
      .join(" ");
    const embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .addField(`${message.guild.name}`, `**Rooms:white_check_mark:**`)
      .addField(
        ":arrow_down: Rooms Number. :heavy_check_mark:",
        `** ${message.guild.channels.size}**`
      )

      .addField(
        ":arrow_down:Rooms  Name. :heavy_check_mark::",
        `**[${channels}]**`
      );
    message.channel.sendEmbed(embed);
  }
});
var AsciiTable = require("ascii-data-table").default;
client.on("message", message => {
  if (message.content.startsWith(prefix + "roles")) {
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send("**ููุฃุณู ูุง ุชูุชูู ุตูุงุญูุฉ** `ADMINISTRATOR`");
    var ros = message.guild.roles.size,
      data = [["Rank", "RoleName"]];
    for (let i = 0; i < ros; i++) {
      if (message.guild.roles.array()[i].id !== message.guild.id) {
        data.push([
          i,
          `${message.guild.roles
            .filter(r => r.position == ros - i)
            .map(r => r.name)}`
        ]);
      }
    }
    let res = AsciiTable.table(data);

    message.channel.send(`**\`\`\`xl\n${res}\`\`\`**`);
  }
});

client.on("message", message => {
  if (message.content.startsWith(prefix + "emojilist")) {
    const List = message.guild.emojis.map(e => e.toString()).join(" ");

    const EmojiList = new Discord.RichEmbed()
      .setTitle("? Emojis")
      .setAuthor(message.guild.name, message.guild.iconURL)
      .setColor("RANDOM")
      .setDescription(List)
      .setFooter(message.guild.name);
    message.channel.send(EmojiList);
  }
});
client.on("message", message => {
  if (message.author.bot) return;

  if (!message.content.startsWith(prefix)) return;

  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);

  let args = message.content.split(" ").slice(1);

  // +say
  if (command === "say") {
    if (!message.channel.guild)
      return message.channel
        .send("**ูุฐุง ุงูุฃูุฑ ููุท ููุณูุฑูุฑุงุช**")
        .then(m => m.delete(5000));
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send("**ููุฃุณู ูุง ุชูุชูู ุตูุงุญูุฉ** `ADMINISTRATOR`");
    message.delete();
    message.channel.sendMessage(args.join(" "));
  }

  if (command == "embed") {
    if (!message.channel.guild)
      return message.channel
        .send("**ูุฐุง ุงูุฃูุฑ ููุท ููุณูุฑูุฑุงุช**")
        .then(m => m.delete(5000));
    if (!message.member.hasPermission("MANAGE_MESSAGES"))
      return message.channel.send(
        "**ููุฃุณู ูุง ุชูุชูู ุตูุงุญูุฉ** `MANAGE_MESSAGES`"
      );
    let say = new Discord.RichEmbed()
      .setDescription(args.join("  "))
      .setColor(0x23b2d6);
    message.channel.sendEmbed(say);
    message.delete();
  }
});
client.on("message", message => {
  if (!message.channel.guild) return;
  if (message.author.bot) return;
  if (message.content === prefix + "image") {
    const embed = new Discord.RichEmbed()

      .setTitle(`This is  ** ${message.guild.name} **  Photo !`)
      .setAuthor(message.author.username, message.guild.iconrURL)
      .setColor(0x164fe3)
      .setImage(message.guild.iconURL)
      .setURL(message.guild.iconrURL)
      .setTimestamp();

    message.channel.send({ embed });
  }
});

client.on("message", function(message) {
  if (message.author.bot) return;
  if (!message.channel.guild) return;

  if (message.content === prefix + "members") {
    const embed = new Discord.RichEmbed().setDescription(`**Members info 
:green_heart: online:   ${
      message.guild.members.filter(m => m.presence.status == "online").size
    }
:heart:  dnd:       ${
      message.guild.members.filter(m => m.presence.status == "dnd").size
    }
:yellow_heart:  idle:     ${
      message.guild.members.filter(m => m.presence.status == "idle").size
    }
:diamond_shape_with_a_dot_inside:   membersCount:  ${message.guild.memberCount -
      message.guild.members.filter(m => m.user.bot).size}
:bulb: bots: ${message.guild.members.filter(m => m.user.bot).size} **`);
    message.channel.send({ embed });
  }
});
client.on("message", message => {
  var args = message.content.split(" ").slice(1);
  if (message.content.startsWith(prefix + "id")) {
    var year = message.author.createdAt.getFullYear();
    var month = message.author.createdAt.getMonth();
    var day = message.author.createdAt.getDate();
    var men = message.mentions.users.first();
    let args = message.content
      .split(" ")
      .slice(1)
      .join(" ");
    if (args == "") {
      var z = message.author;
    } else {
      var z = message.mentions.users.first();
    }

    let d = z.createdAt;
    let n = d.toLocaleString();
    let x;
    let y;

    if (z.presence.game !== null) {
      y = `${z.presence.game.name}`;
    } else {
      y = "No Playing...";
    }
    if (z.bot) {
      var w = "BOT";
    } else {
      var w = "MEMBER";
    }
    let embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setTitle(`**INFO** ${z.username}`)
      .addField("`Your Name`", `**<@` + `${z.id}` + `>**`, true)
      .addField("`ID`", "**" + `${z.id}` + "**", true)
      .addField("`Status`", "**" + y + "**", true)
      .addField("`Acount Type`", "**" + w + "**", true)
      .addField("`Your Tag`", "**#" + `${z.discriminator}**`, true)
      .addField("`Your account created in`", year + "-" + month + "-" + day)
      .addField(
        "`Entered the server in`",
        message.member.joinedAt.toLocaleString()
      )
      .addField("`Last Message`", message.author.lastMessage)

      .setThumbnail(`${z.avatarURL}`)
      .setFooter(message.author.username, message.author.avatarURL);

    message.channel.send({ embed });
    if (!message) return message.reply("**ุถุน ุงููููุดุงู ุจุดูู ุตุญูุญ  ? **");
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "bans")) {
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send("**ููุฃุณู ูุง ุชูุชูู ุตูุงุญูุฉ** `ADMINISTRATOR`");
    message.guild
      .fetchBans()
      .then(bans =>
        message.channel.send(`Number of banned persons **${bans.size}** `)
      );
  }
});
client.on("message",message => {
if(message.author.bot) return;
if(!message.content.startsWith(prefix)) return;
  if(message.content.startsWith(prefix + "avatar")){
const mention = message.mentions.users.first()

if(!mention) return console.log("") 
let embed = new Discord.RichEmbed()
.setColor("BLACK")
.setAuthor(`${mention.username}#${mention.discriminator}`,`${mention.avatarURL}`) 
.setTitle("Avatar Link")
.setURL(`${mention.avatarURL}`)
.setImage(`${mention.avatarURL}`)
.setFooter(`Requested By ${message.author.tag}`,`${message.author.avatarURL}`)    
    message.channel.send(embed)
}
})

client.on("message", message => {
  if(message.author.bot) return;
  if(!message.content.startsWith(prefix)) return;
  if(message.content.startsWith(prefix + "avatar server")) {
    let doma = new Discord.RichEmbed()
    .setColor("BLACK")
    .setAuthor(message.guild.name, message.guild.iconURL)
    .setTitle("Avatar Link")
    .setURL(message.guild.iconURL)
    .setImage(message.guild.iconURL)
    .setFooter(`Requested By ${message.author.tag}`, message.author.avatarURL)
    message.channel.send(doma)
  } else if(message.content.startsWith(prefix + "avatar")) {
    let args = message.content.split(" ")[1]
var avt = args || message.author.id;    
    client.fetchUser(avt).then(user => {
     avt = user;
  let embed = new Discord.RichEmbed() 
  .setColor("BLACK")
  .setAuthor(`${avt.tag}`, avt.avatarURL)
  .setTitle("Avatar Link")
  .setURL(avt.avatarURL)
  .setImage(avt.avatarURL)
  .setFooter(`Requested By ${message.author.tag}`, message.author.avatarURL)
  message.channel.send(embed) 
    })
  }
})

const mapping = {
  " ": "   ",
  "0": ":zero:",
  "1": ":one:",
  "2": ":two:",
  "3": ":three:",
  "4": ":four:",
  "5": ":five:",
  "6": ":six:",
  "7": ":seven:",
  "8": ":eight:",
  "9": ":nine:",
  "!": ":grey_exclamation:",
  "?": ":grey_question:",
  "#": ":hash:",
  "*": ":asterisk:"
};

"abcdefghijklmnopqrstuvwxyz".split("").forEach(c => {
  mapping[c] = mapping[c.toUpperCase()] = ` :regional_indicator_${c}:`;
});

client.on("message", async message => {
  if (message.content.startsWith(prefix + "emoji")) {
    let args = message.content.split(" ").slice(1);
    if (args.length < 1) {
      message.channel.send("You must provide some text to emojify!");
    }

    message.channel.send(
      args
        .join(" ")
        .split("")
        .map(c => mapping[c] || c)
        .join("")
    );
  }
});
client.on("message", message => {
  if (message.content === "$support") {
    let embed = new Discord.RichEmbed()
      .setAuthor(message.author.username)
      .setColor("#9B59B6")
      .addField(
        " ** :gear: Server Support :gear: **",
        "  **https://discord.gg/K73Mtcu**"
      );

    message.channel.sendEmbed(embed);
  }
});
client.on("message", message => {
  if (message.author.bot) return;
  if (message.content.startsWith(prefix + "contact")) {
    if (!message.channel.guild) return;

    let args = message.content
      .split(" ")
      .slice(1)
      .join(" ");

    client.users
      .get("565913860884660249")
      .send(
        "\n" +
          "**" +
          "? ุงูุณูุฑูุฑ :" +
          "**" +
          "\n" +
          "**" +
          "ยป " +
          message.guild.name +
          "**" +
          "\n" +
          "**" +
          " ? ุงููุฑุณู : " +
          "**" +
          "\n" +
          "**" +
          "ยป " +
          message.author.tag +
          "**" +
          "\n" +
          "**" +
          " ? ุงูุฑุณุงูุฉ : " +
          "**" +
          "\n" +
          "**" +
          args +
          "**"
      );

    let embed = new Discord.RichEmbed()
      .setAuthor(message.author.username, message.author.avatarURL)
      .setDescription(
        ":mailbox_with_mail: ุชู ุงุฑุณุงู ุงูุฑุณุงูุฉ ุงูู ุตุงุญุจ ุงูุจูุช ุจูุฌุงุญ"
      )
      .setThumbnail(message.author.avatarURL)
      .setFooter("By : Venom");

    message.channel.send(embed);
  }
});
client.on("message", message => {
  if (!message.channel.guild) return;
  if (message.content.startsWith(prefix + "move")) {
    if (message.member.hasPermission("MOVE_MEMBERS")) {
      if (message.mentions.users.size === 0) {
        return message.channel.send(
          "``ูุงุณุชุฎุฏุงู ุงูุฃูุฑ ุงูุชุจ ูุฐู ุงูุฃูุฑ : " + prefix + "ุงุณุญุจ [USER]``"
        );
      }
      if (message.member.voiceChannel != null) {
        if (message.mentions.members.first().voiceChannel != null) {
          var authorchannel = message.member.voiceChannelID;
          var usermentioned = message.mentions.members.first().id;
          var embed = new Discord.RichEmbed()
            .setTitle("Succes!")
            .setColor("#000000")
            .setDescription(
              `ููุฏ ููุช ุจุณุญุจ <@${usermentioned}> ุงูู ุงูุฑูู ุงูุตูุชู ุงูุฎุงุต ุจู? `
            );
          var embed = new Discord.RichEmbed()
            .setTitle(`You are Moved in ${message.guild.name}`)
            .setColor("RANDOM")
            .setDescription(
              `**<@${message.author.id}> Moved You To His Channel!\nServer --> ${message.guild.name}**`
            );
          message.guild.members
            .get(usermentioned)
            .setVoiceChannel(authorchannel)
            .then(m => message.channel.send(embed));
          message.guild.members.get(usermentioned).send(embed);
        } else {
          message.channel.send(
            "``ูุง ุชุณุชุทูุน ุณุญุจ " +
              message.mentions.members.first() +
              " `ูุฌุจ ุงู ูููู ูุฐู ุงูุนุถู ูู ุฑูู ุตูุชู`"
          );
        }
      } else {
        message.channel.send(
          "**``ูุฌุจ ุงู ุชููู ูู ุฑูู ุตูุชู ููู ุชููู ุจุณุญุจ ุงูุนุถู ุฃููู``**"
        );
      }
    } else {
      message.react("?");
    }
  }
});
client.on("message", message => {
  if (message.author.bot) return;

  if (message.content.startsWith(prefix + "rolebc")) {
    if (!message.member.hasPermission("ADMINISTRATOR")) return;
    let args = message.content.split(" ").slice(2);
    var codes = args.join(" ");

    if (!codes) {
      message.channel.send(
        `ูู ุจูุชุงุจุฉ ุงูุฑุณุงูุฉ | ${prefix}rolebc @everyone message`
      );
      return;
    }

    var role = message.mentions.roles.first();
    if (!role) {
      message.reply("ูุง ุชูุฌุฏ ุฑุชุจุฉ ุจูุฐุง ุงูุงุณู");
      return;
    }
    message.guild.members
      .filter(m => m.roles.get(role.id))
      .forEach(n => {
        n.send(
          "**" +
            "ุงูุณูุฑูุฑ :" +
            "\n" +
            `${message.guild.name}` +
            "\n" +
            "ุงููุฑุณู :" +
            "\n" +
            `${message.author.tag}` +
            "\n" +
            "ุงูุฑุณุงูุฉ :" +
            "\n" +
            `${codes}` +
            "**"
        );
      });
    message.channel.send(
      `ููุฏ ุชู ุงุฑุณุงู ูุฐู ุงูุฑุณุงูุฉ ุงูู ${
        message.guild.members.filter(m => m.roles.get(role.id)).size
      } ุนุถู`
    );
  }
});
client.on("message", msg => {
  if (msg.author.bot) return;
  if (msg.content.startsWith(prefix + "role")) {
    let params = msg.content
      .slice(prefix.length)
      .trim()
      .split(/ +/g);
    if (!params[0])
      return msg.channel.send(
        `**syntax: ${prefix}role <all/humans/bots/@user> <name role/@role>`
      );
    if (params[0] === "all") {
      if (!params[1])
        return msg.channel.send(
          `**ููุดู ุงูุฑุชุจุฉ ุงู ุงูุชุจ ุงุณููุง \n syntax: ${prefix}role all <@role / name role>**`
        );
      let role =
        msg.mentions.roles.first() ||
        msg.guild.roles.find(r =>
          r.name.toLowerCase().startsWith(params[1].toLowerCase())
        );
      if (!role) return msg.channel.send(`**ูู ุงุณุชุทุน ุงูุฌุงุฏ ูุฐู ุงูุฑุชุจุฉ**`);
      msg.guild.members.forEach(m => {
        if (m.roles.some(r => r.id == role.id)) return;
        m.addRole(role);
      });
      msg.channel.send(`**done give all role @${role.name}**`);
    } else if (params[0] === "bots") {
      if (!params[1])
        return msg.channel.send(
          `**ููุดู ุงูุฑุชุจุฉ ุงู ุงูุชุจ ุงุณููุง \n syntax: ${prefix}role bots <@role / name role>**`
        );
      let role =
        msg.mentions.roles.first() ||
        msg.guild.roles.find(r =>
          r.name.toLowerCase().startsWith(params[1].toLowerCase())
        );
      if (!role) return msg.channel.send(`**ูู ุงุณุชุทุน ุงูุฌุงุฏ ูุฐู ุงูุฑุชุจุฉ**`);
      let bots = msg.guild.members.filter(m => m.user.bot);
      bots.forEach(bot => {
        if (bot.roles.some(r => r.id == role.id)) return;
        bot.addRole(role);
      });
      msg.channel.send(`**done give all bots role @${role.name}**`);
    } else if (params[0] === "humans") {
      if (!params[1])
        return msg.channel.send(
          `**ููุดู ุงูุฑุชุจุฉ ุงู ุงูุชุจ ุงุณููุง \n syntax: ${prefix}role humans <@role / name role>**`
        );
      let role =
        msg.mentions.roles.first() ||
        msg.guild.roles.find(r =>
          r.name.toLowerCase().startsWith(params[1].toLowerCase())
        );
      if (!role) return msg.channel.send(`**ูู ุงุณุชุทุน ุงูุฌุงุฏ ูุฐู ุงูุฑุชุจุฉ**`);
      let humans = msg.guild.members.filter(m => !m.user.bot);
      humans.forEach(h => {
        if (h.roles.some(r => r.id == role.id)) return;
        h.addRole(role);
      });
      msg.channel.send(`**done give all humans role @${role.name}**`);
    } else {
      if (!params[1])
        return msg.channel.send(
          `**ููุดู ุงูุฑุชุจุฉ ุงู ุงูุชุจ ุงุณููุง \n syntax: ${prefix}role @user <@role / name role>**`
        );
      let role =
        msg.mentions.roles.first() ||
        msg.guild.roles.find(r =>
          r.name.toLowerCase().startsWith(params[1].toLowerCase())
        );
      if (!role) return msg.channel.send(`**ูู ุงุณุชุทุน ุงูุฌุงุฏ ูุฐู ุงูุฑุชุจุฉ**`);
      let userID = params[0].slice(2, -1);
      let user = msg.guild.members.get(userID);
      if (!user) return;
      user.addRole(role);
      msg.channel.send(`**Done give ${user} @${role.name}**`);
    }
  }
});
client.on("error", err => {
  console.log(err);
});
const members = JSON.parse(fs.readFileSync("./members.json")) || {};
client.on("ready", () => {
  console.log(`Logged in as ${client.user.tag}!`);
  client.guilds.forEach(g => {
    if (!members[g.id]) members[g.id] = {};
  });
});

client.on("guildMemberRemove", member => {
  let roles = [];
  member.roles.forEach(r => roles.push(r.id));
  members[member.guild.id][member.id] = roles;
  saveChanges();
});
client.on("guildMemberAdd", member => {
  if (members[member.guild.id][member.id] !== undefined) {
    member.addRoles(
      members[member.guild.id][member.id],
      "Returning roles after leaving"
    );
    members[member.guild.id][member.id] = [];
  }
  saveChanges();
});
function saveChanges() {
  fs.writeFileSync("./members.json", JSON.stringify(members, null, 4));
}

client.on("message", message => {
  if (message.content === prefix + "hchannel") {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.reply("You Dont Have Perms :x:");
    message.channel.overwritePermissions(message.guild.id, {
      READ_MESSAGES: false
    });
    message.channel.send("Channel Hided Successfully ! :white_check_mark:  ");
  }
});
client.on("message", message => {
  if (message.content === prefix + "schannel") {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.reply(":x:");
    message.channel.overwritePermissions(message.guild.id, {
      READ_MESSAGES: true
    });
    message.channel.send("Done  ");
  }
});

// ูุง ุชูุณู ุชุญูู ุงูุจูุฌ npm i to-time

client.on("message", message => {
  if (message.content.startsWith(prefix + "mutevoice")) {
    if (!message.member.hasPermission("MUTE_MEMBERS"))
      return message.channel
        .sendMessage("**ููุณ ูุฏูู ุตูุงุญูุฉ ูุงุนุทุงุก ูููุช ุตูุชู**โ ")
        .then(m => m.delete(5000));
    if (!message.guild.member(client.user).hasPermission("MUTE_MEMBERS"))
      return message
        .reply("**I Don't Have `MUTE_MEMBERS` Permission**")
        .then(msg => msg.delete(6000));

    if (message.mentions.users.size === 0) {
      return message.reply("โููุดู ุงูุดุฎุต ูุฃุนุทุงุฆู ุงููููุช๐");
    }
    let muteMember = message.guild.member(message.mentions.users.first());
    if (!muteMember) {
      return message.reply("โูุฑุฉ ุฃุฎุฑูโ");
    }
    muteMember.setMute(true);
    if (muteMember) {
      message.channel.sendMessage("ุชู ุฃุนุทุงุฆู ุงููููุช ุจูุฌุงุญ|๐");
    }
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "unmutevoice")) {
    if (!message.member.hasPermission("MUTE_MEMBERS"))
      return message.channel
        .sendMessage("**ููุณ ูุฏูู ุตูุงุญูุฉ ูุงุนุทุงุก ูููุช ุตูุชู**โ ")
        .then(m => m.delete(5000));
    if (!message.guild.member(client.user).hasPermission("MUTE_MEMBERS"))
      return message
        .reply("**I Don't Have `MUTE_MEMBERS` Permission**")
        .then(msg => msg.delete(6000));

    if (message.mentions.users.size === 0) {
      return message.reply("๐ฑููุดู ุงูุดุฎุต ููู ุงููููุช ุนูู๐");
    }
    let muteMember = message.guild.member(message.mentions.users.first());
    if (!muteMember) {
      return message.reply("๐ุนูุฏ ูุฑุฉ ุฃุฎุฑู๐");
    }
    muteMember.setMute(false);
    if (muteMember) {
      message.channel.sendMessage("๐ุชู ูู ุงููููุช ุจูุฌุงุญโ");
    }
  }
});


client.on("message", message => {
  if (message.author.x5bz) return;
  if (!message.content.startsWith(prefix)) return;

  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);

  let args = message.content.split(" ").slice(1);

  if (command == "kick") {
    if (!message.channel.guild)
      return message.reply("** This command only for servers**");

    if (!message.guild.member(message.author).hasPermission("KICK_MEMBERS"))
      return message.reply("**You Don't Have ` KICK_MEMBERS ` Permission**");
    if (!message.guild.member(client.user).hasPermission("KICK_MEMBERS"))
      return message.reply("**I Don't Have ` KICK_MEMBERS ` Permission**");
    let user = message.mentions.users.first();
    let reason = message.content
      .split(" ")
      .slice(2)
      .join(" ");
    if (message.mentions.users.size < 1) return message.reply("**ููุดู ุดุฎุต**");
    if (!reason) return message.reply("**ุงูุชุจ ุณุจุจ ุงูุทุฑุฏ**");
    if (!message.guild.member(user).kickable)
      return message.reply(
        "**ูุงูููููู ุทุฑุฏ ุดุฎุต ุงุนูู ูู ุฑุชุจุชู ูุฑุฌู ุงุนุทุงุก ุงูุจูุช ุฑุชุจู ุนุงูู**"
      );

    message.guild.member(user).kick();

    const kickembed = new Discord.RichEmbed()
      .setAuthor(`KICKED!`, user.displayAvatarURL)
      .setColor("RANDOM")
      .setTimestamp()
      .addField("**User:**", "**[ " + `${user.tag}` + " ]**")
      .addField("**By:**", "**[ " + `${message.author.tag}` + " ]**")
      .addField("**Reason:**", "**[ " + `${reason}` + " ]**");
    message.channel.send({
      embed: kickembed
    });
  }
});

client.on("message", message => {
  if (message.content === prefix + "mc") {
    if (!message.channel.guild)
      return message.reply("** This command only for servers**");

    if (!message.member.hasPermission("MANAGE_MESSAGES"))
      return message.reply(" **__ููุณ ูุฏูู ุตูุงุญูุงุช__**");
    message.channel
      .overwritePermissions(message.guild.id, {
        SEND_MESSAGES: false
      })
      .then(() => {
        message.reply("**__ุชู ุชูููู ุงูุดุงุช__ :white_check_mark: **");
      });
  }
  //FIRE BOT
  if (message.content === prefix + "uc") {
    if (!message.channel.guild)
      return message.reply("** This command only for servers**");

    if (!message.member.hasPermission("MANAGE_MESSAGES"))
      return message.reply("**__ููุณ ูุฏูู ุตูุงุญูุงุช__**");
    message.channel
      .overwritePermissions(message.guild.id, {
        SEND_MESSAGES: true
      })
      .then(() => {
        message.reply("**__ุชู ูุชุญ ุงูุดุงุช__:white_check_mark:**");
      });
  }
});
client.on("message", message => {
  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);
  if (command == "ct") {
    if (!message.member.hasPermission("MANAGE_CHANNELS"))
      return message.reply("You Don't Have `MANAGE_CHANNELS` Premissions ");
    let args = message.content.split(" ").slice(1);
    message.guild.createChannel(args.join(" "), "text");
    message.channel.sendMessage("ุชูู ุฅููุดุงุก ุฑูู ููุชุงุจูู");
  }
});
client.on("message", message => {
  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);
  if (command == "cv") {
    if (!message.member.hasPermission("MANAGE_CHANNELS"))
      return message.reply("You Don't Have `MANAGE_CHANNELS` Premissions ");
    let args = message.content.split(" ").slice(1);
    message.guild.createChannel(args.join(" "), "voice");
    message.channel.sendMessage("ุชู ุงูุดุงุก ุฑูู ุตูุชู");
  }
});
client.on("message", message => {
  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);
  if (command == "delete") {
    if (!message.member.hasPermission("MANAGE_CHANNELS"))
      return message.reply("You Don't Have `MANAGE_CHANNELS` Premissions ");
    let args = message.content.split(" ").slice(1);
    let channel = message.client.channels.find("name", args.join(" "));
    if (!channel)
      return message
        .reply("**There is no room like this name -_-**")
        .catch(console.error);
    channel.delete();
  }
});
client.on("message", bz => {
  let args = bz.content
    .split(" ")
    .slice(1)
    .join(" ");
  if (bz.content.startsWith(prefix + "make")) {
    if (!args) return bz.channel.send("`Please Select Number!`");
    if (!bz.member.hasPermission("MANAGE_ROLES"))
      return bz.channel.sendMessage("`** `[MANAGE_ROLES]` !**");
    bz.channel.send(`**Created __${args}__ Colors**`);
    setInterval(function() {});
    let count = 0;
    let ecount = 0;
    for (let x = 1; x < `${parseInt(args) + 1}`; x++) {
      bz.guild.createRole({ name: x, color: "RANDOM" });
    }
  }
});
client.on("message", message => {
  if (message.content.toLowerCase().startsWith(prefix + `topservers`)) {
    const top = client.guilds
      .sort((a, b) => a.memberCount - b.memberCount)
      .array()
      .reverse();
    message.channel.send(
      `**Top 10 Servers : **\n1. **${top[0].name}**: ${top[0].memberCount} \n2. **${top[1].name}**: ${top[1].memberCount}.\n3. **${top[2].name}**: ${top[2].memberCount}.\n4. **${top[3].name}**: ${top[3].memberCount}.\n5. **${top[4].name}**: ${top[4].memberCount}.\n6. **${top[5].name}**: ${top[5].memberCount}.\n7. **${top[6].name}**: ${top[6].memberCount}.\n8. **${top[7].name}**: ${top[7].memberCount}.\n9. **${top[8].name}**: ${top[8].memberCount}.\n10. **${top[9].name}**: ${top[9].memberCount} .`
    );
  }
});

client.on("message", message => {
  if (message.author.bot) return;
  if (message.content.startsWith(prefix + "uptime")) {
    let uptime = client.uptime;

    let days = 0;
    let hours = 0;
    let minutes = 0;
    let seconds = 0;
    let notCompleted = true;

    while (notCompleted) {
      if (uptime >= 8.64e7) {
        days++;
        uptime -= 8.64e7;
      } else if (uptime >= 3.6e6) {
        hours++;
        uptime -= 3.6e6;
      } else if (uptime >= 60000) {
        minutes++;
        uptime -= 60000;
      } else if (uptime >= 1000) {
        seconds++;
        uptime -= 1000;
      }

      if (uptime < 1000) notCompleted = false;
    }

    message.channel.send(
      "`" + `${days} days, ${hours} hrs, ${minutes} , ${seconds} sec` + "`"
    );
  }
});

client.on("message", function(message) {
  if (message.content.startsWith(prefix + "rps")) {
    let messageArgs = message.content
      .split(" ")
      .slice(1)
      .join(" ");
    let messageRPS = message.content
      .split(" ")
      .slice(2)
      .join(" ");
    let arrayRPS = ["**# - Rock**", "**# - Paper**", "**# - Scissors**"];
    let result = `${arrayRPS[Math.floor(Math.random() * arrayRPS.length)]}`;
    var RpsEmbed = new Discord.RichEmbed()
      .setAuthor(message.author.username)
      .setThumbnail(message.author.avatarURL)
      .addField("Rock", "๐ท", true)
      .addField("Paper", "๐ต", true)
      .addField("Scissors", "๐ธ", true);
    message.channel.send(RpsEmbed).then(msg => {
      msg.react("๐ท");
      msg.react("๐ต");
      msg
        .react("๐ธ")
        .then(() => msg.react("๐ท"))
        .then(() => msg.react("๐ต"))
        .then(() => msg.react("๐ธ"));
      let reaction1Filter = (reaction, user) =>
        reaction.emoji.name === "๐ท" && user.id === message.author.id;
      let reaction2Filter = (reaction, user) =>
        reaction.emoji.name === "๐ต" && user.id === message.author.id;
      let reaction3Filter = (reaction, user) =>
        reaction.emoji.name === "๐ธ" && user.id === message.author.id;
      let reaction1 = msg.createReactionCollector(reaction1Filter, {
        time: 12000
      });

      let reaction2 = msg.createReactionCollector(reaction2Filter, {
        time: 12000
      });
      let reaction3 = msg.createReactionCollector(reaction3Filter, {
        time: 12000
      });
      reaction1.on("collect", r => {
        message.channel.send(result);
      });
      reaction2.on("collect", r => {
        message.channel.send(result);
      });
      reaction3.on("collect", r => {
        message.channel.send(result);
      });
    });
  }
});
const speed = [
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429298994078810127/a90c6b270eb8bb2e.png",
    answers: ["ุงูุจุฑุงุฒูู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429298996385677312/93b0c6f963ca78cc.png",
    answers: ["ุงูุณุนูุฏูุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429298996130086934/341960d3e3e1daad.png",
    answers: ["ุงููุณุทูุทูููุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429298998172450816/5c70f0d2a02f741a.png",
    answers: ["ุงูููุงูุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429298999799971860/00c3e44857da1d4f.png",
    answers: ["ุงูุงุฒูู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429299000026595338/56ca5f3803361aaf.png",
    answers: ["ุฌุงูุงุณูุฑุจุช"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429299000676581382/426f82fc46406cf9.png",
    answers: ["ุณููู ูู ุตุนุจู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429299005474996255/7ec6030fe3423458.png",
    answers: ["ุทุจู ุฑุทุจ ูุฑู ุจูุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429298913980317696/429299005458087936/fd790725b7496d35.png",
    answers: ["ูุชุฌุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330177894645780/7a11f3f73c1df90d.png",
    answers: ["ุดุฌุฑุฉ ุงูุฃูุบูุฑู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330188162301952/a5d4f8c72362aa3f.png",
    answers: ["ุนุด ุงูุนุตููุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330194587713554/c5b6b7bad08671a9.png",
    answers: ["ูู ุจูุชุงุจุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330199838982152/1e05423a0b91fdaa.png",
    answers: ["ูุงูููู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330207711690762/39a6a460c6211b5d.png",
    answers: ["ูููุจููุงูุง"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330217971089418/e5e323d8e8ce00ad.png",
    answers: ["ููุงูู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330224316940329/7872c68940fd6f08.png",
    answers: ["ูุงุฎุฑุง"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330229140652032/2419fe025b8b35f2.png",
    answers: ["ููู ุงูุฎููุณ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330238330241044/DO_YOU_KNOW_THE_WAY.png",
    answers: ["DO YOU KNOW THE WAY"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330246840483842/23dc3a67e7bedc9e.png",
    answers: ["ุงูุฃุฑุถ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330256256827414/9f90c0fcbfc60a0d.png",
    answers: ["ุงูุจูุงุจุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330261663285259/0e41e6dcefc80cd3.png",
    answers: ["ุงูุฌูู ุงุจู ุฑุงุณูู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330264901287946/6459ace62733c477.png",
    answers: ["ุงูุญูุช ุงูุฃุฒุฑูุก"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330272920797226/de084748fdbe524b.png",
    answers: ["ุงููุงุฑุจ ุงูููุณูุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330281372057622/bcae99355befcd06.png",
    answers: ["ุงููุฏุฑุณุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330289769054230/c030902a9d21637c.png",
    answers: ["ุงููุงุจุงู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330298585481218/2ca3d0f29283cced.png",
    answers: ["ุจูุงูุณุชุงูุดู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330311558725632/6dc92ab82d3df0e4.png",
    answers: ["ุฌุฒุฑ ุงูููุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429330312842182657/f50f4fab4b6559c0.png",
    answers: ["ุญุดูุด"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429932988625584139/3333333.png",
    answers: ["ุณูุจุฑุงุดู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429932994351071233/3333333.png",
    answers: ["ููุชุดู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429933002399940609/3333333.png",
    answers: ["ุงูููู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429933012164149249/3333333.png",
    answers: ["ุชูุณุชุง ูุงุบูุณุง"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429933033009840129/3333333.png",
    answers: ["ุจุณููุช ุงุจู ููุฏ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429933041033674753/3333333.png",
    answers: ["ุชูุฃูุฃุชู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429933050139246592/3333333.png",
    answers: ["ุงูุฌููุฉ ุงููููุฏุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/429933059278635028/204ba71fbee91a03.png",
    answers: ["ุงูุฃูุณูุงุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040573269901332/3333333.png",
    answers: ["ููุช ุงูุดู ูุฃูุดู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040585357754368/3333333.png",
    answers: ["ูุงุงุงุงู ุจูุชุก"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040593595629568/3333333.png",
    answers: ["ุงุจู ูุงุตุฑ ุณุฑู ูููู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040602235895810/fghfghfgh.png",
    answers: ["ุนุฏุฏ ุงููู ุจุฑูุฌููู 2"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040608825147412/hhhhyyrf87654.png",
    answers: ["Dark_Neet"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040611819749387/354d9e28fd1264f5.png",
    answers: ["ุจุงุจุง ุณูููุฑ ูุชุนุงุทู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040619331878922/4b24f4792476c04f.png",
    answers: ["ููุฑูุฏุง ุญูุถูุงุช ููุฏ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040624603987968/5ff29b1066a3b9c7.png",
    answers: ["ูู ุงูุฏูุน ูู ุนููู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040631885299722/77f33951be682d8f.png",
    answers: ["ุทุงุฑุช ุงูุทูุงุฑู ุทุงุฑุช"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040640928219136/29c240679c04c148.png",
    answers: ["ุฃูุง ููู ุฑุงุณู ุฑูุดู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040652542246912/bbcb4aa9853bf1d2.png",
    answers: ["ูุฑูู ุงููุฌูุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040659437813780/69df1a1ea78bf05c.png",
    answers: ["ุฎุงูุฏ ุนุจุฏุงูุฑุญูู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040666895024128/8bc7742b95673c38.png",
    answers: ["ุญุจูุช ูุฑู ูู ููุจู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040674067546113/9d1a9eee36622271.png",
    answers: ["ูุฑุณุชูุงูู ูุฒู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040682913333248/f19a97c10ac739e1.png",
    answers: ["ุฃูุช ููุฑ ูุง ููุฑ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040692140539904/0a25039aa164a42b.png",
    answers: ["ุงูุง ุงุฌูู ูุฎููู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040699317256192/da72e3e3fe6bfceb.png",
    answers: ["ุฏููุช ุชุงุชุด"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040706464350218/d6339ed123a20afe.png",
    answers: ["ุชูู ูุฌูุฑู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040714588454912/965f8266e9501b35.png",
    answers: ["ุฏุจุงุจ ุงุฑุจุน ููุฑุงุช"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040721601331211/ae8cf2598c441e76.png",
    answers: ["ุงููุฑุด ุงูุฃุณูุฏุฏ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040729637748747/bf76692d54e6a0dd.png",
    answers: ["ุฏุฏุณู ููุฏูู 85"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040736835043341/e66ff909a6330b13.png",
    answers: ["ุงูุญุงุฑุซูุก"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040746503176194/351af3b19fc53323.png",
    answers: ["ุนุฒุงุฒู ูุณุฑุน"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040751557181440/6777776666.png",
    answers: ["ุฌุงูู ุดุงุงู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040758108684289/2613844efcb8b05b.png",
    answers: ["ุฏุงุฑู ูุช"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040765671014401/c89aa167715a85b9.png",
    answers: ["ูุงูุชุงุณุชูู"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040772818239489/01d73182b48785e1.png",
    answers: ["ุฒุจุงูู ูุชูููุฉ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040778467835924/9dff572a5bf1b602.png",
    answers: ["ุงูุณ ุจููุณ ููุฏ"]
  },
  {
    type:
      "https://cdn.discordapp.com/attachments/429330153735454722/430040783228370964/91ebb70e0dd936be.png",
    answers: ["ุจูุณู ูุงููุตุฎุฎ"]
  }
];

client.on("message", message => {
  if (![message.author.id]) [message.author.id] = {};
  if (!message.guild) return;
  let id = message.author.id;
  if (spee[id] && new Date().getTime() - spee[id] < 15 * 1000) {
    let r = new Date().getTime() - spee[id];
    r = 15 * 1000 - r;
  }
  if (message.content == prefix + "speed") {
    try {
    } catch (e) {}

    if (!message.channel.guild)
      return message
        .reply("**ูุฐุง ุงูุฃูุฑ ููุณูุฑูุฑุงุช ููุท**")
        .then(m => m.delete(3000));

    const item = speed[Math.floor(Math.random() * speed.length)];
    const filter = response => {
      return item.answers.some(
        answer => answer.toLowerCase() === response.content.toLowerCase()
      );
    };
    message.channel.send("**Game is Start now...!**").then(msg => {
      const embed = new Discord.RichEmbed()
        .setColor("0054dd")
        .setAuthor(`? |You have ยป15ยซ seconds to type the word`)
        .setImage(`${item.type}`)
        .setFooter(`${message.author.tag}`, message.author.avatarURL);

      msg.channel.send(embed).then(() => {
        message.channel
          .awaitMessages(filter, {
            maxMatches: 1,
            time: 15000,
            errors: ["time"]
          })
          .then(collected => {
            const sh = new Discord.RichEmbed()
              .setColor("04791c")
              .setDescription("**? |Good Job +1P**")
              .addField(`Type ${prefix}mypoints`, "To Show ur Points", true)
              .setFooter(message.author.username, message.author.avatarURL);
            message.channel.sendEmbed(sh);
            let won = collected.first().author; // ูู ูุฐุง ุงูุณุทุฑ ูููู ุงูููุฏ ุจุณุญุจ ุงูุฃู ุฏู ุงูุฐู ูุงู ุจุงูุฃุฌุงุจุฉ ุงููุงู
          })
          .catch(collected => {
            // ูู ุญุงู ูู ููู ุฃุญุฏ ุจุงูุฅุฌุงุจุฉ
            message.channel.send(`?? |**Time Is End**`);
          });
      });
    });
    spee[id] = new Date().getTime();
  }
});
client.on("guildCreate", guild => {
  const embed = new Discord.RichEmbed()
    .setColor("RED")
    .setTitle("Click Here To Add Bot .!")
    .setURL(
      "https://discordapp.com/oauth2/authorize?client_id=565290611725434921&scope=bot&permissions=2146958591"
    ).setDescription(`**
  New Server Add  ยฉ ?
ุงุณู ุงูุณูุฑูุฑ: ${guild.name}
ุตุงุญุจ ุงูุณูุฑูุฑ: ${guild.owner}**`);
  client.channels.get("572745247948537866").sendEmbed(embed);
});
client.on("guildDelete", guild => {
  const embed = new Discord.RichEmbed()
    .setColor("GOLD")
    .setTitle("Click Here To Add Bot .!")
    .setURL(
      "https://discordapp.com/oauth2/authorize?client_id=565290611725434921&scope=bot&permissions=2146958591"
    ).setDescription(`**
  Server Kicked  ยฉ :cry:
ุงุณู ุงูุณูุฑูุฑ: ${guild.name}
ุตุงุญุจ ุงูุณูุฑูุฑ: ${guild.owner}**`);
  client.channels.get("572745247948537866").sendEmbed(embed);
});
var type = [
  {
    type: "ูุง ูู ุฃุตู ูููุฉ ุฃุทูุณ ุงูุชู ุชุทูู ุนูู ูุชุงุจ ุงูุฎุฑุงุฆุท ุ",
    answers: ["ูููุงูู"]
  },
  {
    type: "ูุง ูู ููู ุงูุญุฌ ุงูุฃูุจุฑุ",
    answers: ["ููู ุงููุญุฑ"]
  },
  {
    type: "ูุง ูู ุงูุจุฑ ุฎููุฌ ูู ุงูุนุงูู ุ",
    answers: ["ุฎููุฌ ุงูููุณูู"]
  },
  {
    type: "ูุง ูู ุงุณู ุจูุช ุงูุฏุฌุงุฌ ุ",
    answers: ["ูู"]
  },
  {
    type: "ูุง ูู ุฃูู ุฌุงูุน ุฃููู ูู ูุตุฑ ุ",
    answers: ["ุฌุงูุน ุนูุฑู ุจู ุงูุนุงุต"]
  },
  {
    type: "ูุง ูู ุฃุทูู ููุฑ ูู ุขุณูุง ุ",
    answers: ["ุงููุงูุฌุณุชู"]
  },
  {
    type: "ูุง ูู ุฃูุฑุจ ูููุจ ุฅูู ุงูุดูุณ ุ",
    answers: ["ุนุทุงุฑุฏ"]
  },
  {
    type: "ูุง ูู ุงูุญููุงู ุงูุฐู ููุณูู ุงูุจููุณ ุ",
    answers: ["ุงูุงุณุฏ"]
  },
  {
    type: "ุฃูุดู ุจุฏูู ูุฏููู ูุฃุทูุฑ ุจูุง ุฌูุงุญูู ูุฃุจูู ุจุฏูู ุนูููู ููู ุฃูุง ุ",
    answers: ["ุงูุณุญุงุจ"]
  },
  {
    type: "ูุง ูู ุงูุณูุฑุฉ ุงูุชู ุชุนุฏู ุซูุซ ุงููุฑุขู ุ",
    answers: ["ุงูุฅุฎูุงุต"]
  },
  {
    type: "ูุง ูู ูุฏููุฉ ุงูุชูุงู ุงูุณุจุน ุ",
    answers: ["ุฑููุง"]
  },
  {
    type: "ูุง ูู ุงูุฏููุฉ ุงูุนุฑุจูุฉ ุงูุชู ููุฑ ุจูุง ุฎุท ุงูุงุณุชูุงุก ุ",
    answers: ["ุงูุตููุงู"]
  },
  {
    type: "ูุงุฐุง ูุณูู ูู ูุงููุฑุฃ ููุงููุชุจ ุ",
    answers: ["ูุงูููู"]
  },
  {
    type: "ูุงุฐุง ูุทูู ุนูู ุงูุดุฎุต ุงูุฐู ูุง ูุนุฑู ุงููุฑุงู ููุง ุงููุชุงุจู ุ",
    answers: ["ุฃูู"]
  },
  {
    type: "ูุงูู ุงููููู ุงูุฑุฆุณู ููุฒุฌุงุฌ ุ",
    answers: ["ุงูุฑูู"]
  },
  {
    type: "ูู ูู ุงููุฑุงู ุงููุญูุฏู ุงูุชู ุฐูุฑ ุงุณููุง ูู ุงููุฑุขู ุงููุฑูู ุ",
    answers: ["ูุฑูู"]
  },
  {
    type: "ูู ุนุฏุฏ ุงูุณุฌุฏุงุช ูู ุงููุฑุขู ุงููุฑูู ุ",
    answers: ["15"]
  },
  {
    type: "ุฃู ูู ุงุนุถุงุก ุงูุฌุณู ูุณุชููู 40% ูู ุฃููุณุฌูู ุงูุฏู ุ",
    answers: ["ุงููุฎ"]
  },
  {
    type: "ูู ูู ุงูู ูุจู ุจุนุซ ูุจูู ุงุณุฑุงุฆูู ุ",
    answers: ["ููุณู"]
  },
  {
    type: "ุฃู ูู ุงูุงูุงูู ูู ูุตุจูุง ุฒูุฒุงู ููู ุงูููุงูู ุ",
    answers: ["ุงููุณุงุฌุฏ"]
  },
  {
    type: "ูุง ุงูุญููุงู ุงูุฐู ุนูุฏู ุฃุนูู ูุณุจุฉ ุถุบุท ุฏู ุ",
    answers: ["ุงูุฒุฑุงูุฉ"]
  },
  {
    type: "ูู ุฑุฃุณ ููุง ุนูู ูู ุ",
    answers: ["ุงูุฏุจูุณ"]
  },
  {
    type:
      "ูู ุงูุฐู ุงุณุชุนูู ุงูุฃุดุนุฉ ุงูุดูุณูุฉ ูุณูุงุญ ูู ุงูุญุฑุจ ููุถู ุจูุง ุนูู ุงูุฃุณุทูู ุงูุฑููุงูู ุญูููุง ุญุงูู ุบุฒู ุจูุงุฏู ุ",
    answers: ["ุฃุฑุดููุฏุณ"]
  },
  {
    type: "ูุง ูู ุงูุดูุก ุงูุฐู ุฎููู ุงููู ูููุฑู ุ",
    answers: ["ุตูุช ุงูุญููุฑ"]
  },
  {
    type:
      "ูุง ูู ุงูุญููุงู ุงูุฐู ูููุช ุฅุฐุง ูุชุญุช ููู ูุฃูุซุฑ ูู ุฏูููุฉ ุญูุซ ุฃูู ูุง ูุชููุณ ูููู ููุชูุญ ุ",
    answers: ["ุงูุถูุฏุน"]
  },
  {
    type:
      "ูุง ูู ุงูุญููุงู ุงูุฐู ููุชุญุฑ ุนูุฏูุง ูููููู ุจููุณู ูู ุงููุงุก ูุฐูู ูุนุฏู ุงุณุชุทุงุนุชู ุงูุนูู ุ",
    answers: ["ุงูุฎูููุฒูููุฑ"]
  },
  {
    type: "ูุง ูู ุงููุฑุถ ุงูุฐู ุฃูุทููููููู ุนููู ุงูููุช ุงูุฃุณูุฏ ุ",
    answers: ["ุฌุฒุฑ ุงูููุฑ"]
  },
  {
    type: "ูุง ูู ุงููุนุฏู ุงููุญูุฏ ุงูุฐู ููุฌุฏ ูู ุงูุญุงูุฉ ุงูุณุงุฆูุฉ ุ",
    answers: ["ุงูุฒุฆุจู"]
  },
  {
    type: "ูุง ุฌูุน ูููุฉ ุบุฑุงุจ ุ",
    answers: ["ุฃุบุฑุจุฉ"]
  },
  {
    type: "ูู ูุงู ุนูุฑ ุงูุฑุณูู ุนูุฏูุง ุชูููุช ุฃูู ุ",
    answers: ["8 ุณููุงุช"]
  },
  {
    type: "ูู ูู ุตุงุญุจ ููุจ ุดุงุนุฑ ุงูููู ุ",
    answers: ["ุญุงูุธ ุงุจุฑุงููู"]
  },
  {
    type: "ูุง ูู ุงูุนุงุตูุฉ ุงูุงูุชุตุงุฏูุฉ ูููุบุฑุจ ุ",
    answers: ["ุงูุฏุงุฑ ุงูุจูุถุงุก"]
  }
];

client.on("message", message => {
  if (![message.author.id]) [message.author.id] = {};
  if (!message.guild) return;
  let id = message.author.id;
  if (spee[id] && new Date().getTime() - spee[id] < 15 * 1000) {
    let r = new Date().getTime() - spee[id];
    r = 15 * 1000 - r;
    return;
  }
  if (message.content == prefix + "quas") {
    try {
    } catch (e) {}

    if (!message.channel.guild)
      return message
        .reply("**ูุฐุง ุงูุฃูุฑ ููุณูุฑูุฑุงุช ููุท**")
        .then(m => m.delete(3000));

    const item = type[Math.floor(Math.random() * type.length)];
    const filter = response => {
      return item.answers.some(
        answer => answer.toLowerCase() === response.content.toLowerCase()
      );
    };
    message.channel.send("**Game is Start now...!**").then(msg => {
      const embed = new Discord.RichEmbed()
        .setColor("0054dd")
        .setTitle(`**${item.type}**`)
        .setFooter(`${message.author.tag}`, message.author.avatarURL);

      msg.channel.send(embed).then(() => {
        message.channel
          .awaitMessages(filter, {
            maxMatches: 1,
            time: 30000,
            errors: ["time"]
          })
          .then(collected => {
            const sh = new Discord.RichEmbed()
              .setColor("04791c")
              .setDescription("**? |Good Job +1P**")
              .addField(`Type ${prefix}mypoints`, "To Show ur Points", true)
              .setFooter(message.author.username, message.author.avatarURL);
            message.channel.sendEmbed(sh);
            let won = collected.first().author; // ูู ูุฐุง ุงูุณุทุฑ ูููู ุงูููุฏ ุจุณุญุจ ุงูุฃู ุฏู ุงูุฐู ูุงู ุจุงูุฃุฌุงุจุฉ ุงููุงู
          })
          .catch(collected => {
            // ูู ุญุงู ูู ููู ุฃุญุฏ ุจุงูุฅุฌุงุจุฉ
            message.channel.send(`?? |**Time Is End**`);
          });
      });
    });
    spee[id] = new Date().getTime();
  }
});
client.on("message", message => {
  if (!message.channel.guild) return;
  if (message.content.startsWith(prefix + "ping")) {
    if (!message.channel.guild) return;
    var msg = `${Date.now() - message.createdTimestamp}`;
    var api = `${Math.round(client.ping)}`;
    if (message.author.bot) return;
    let embed = new Discord.RichEmbed()
      .setAuthor(message.author.username, message.author.avatarURL)
      .setColor("RANDOM")
      .addField("**Time Taken:**", msg + " ms :signal_strength: ")
      .addField("**WebSocket:**", api + " ms :signal_strength: ");
    message.channel.send({ embed: embed });
  }
});
client.on("message", message => {
  var cats = [
    "http://palestine-kitchen.ps/wp-content/uploads/2017/12/%D9%86%D9%83%D8%AA-%D8%AF%D8%A8%D8%A7%D9%86%D8%A9.png",
    "http://www.i7lm.com/wp-content/uploads/2017/04/136769797816.jpg",
    "https://4.bp.blogspot.com/-p62zmDIDXmI/WKzqNt9smaI/AAAAAAAAC4Q/sW_bSIB8OaQhwOYFeplc3uzz8PBN7l3YACEw/s1600/13602501135.jpg",
    "https://www.universemagic.com/images/2016/03/7938-2-or-1457539273.jpg",
    "https://1.bp.blogspot.com/-yFk-FzHSyE8/WR9fmPcsCUI/AAAAAAAAE6c/AmvjLadOiLY9GiCqMLHgA121bY2RS_dCwCLcB/s1600/%25D9%2586%25D9%2583%25D8%25AA%2B%25D9%2585%25D8%25B6%25D8%25AD%25D9%2583%25D8%25A9%2B1.jpg",
    "https://l7zaat.com/wp-content/uploads/2018/02/423.jpg",
    "https://www.petfinder.com/wp-content/uploads/2012/11/101438745-cat-conjunctivitis-causes.jpg",
    "https://i.fatafeat.com/storage/attachments/15/image3_698123_large.jpg",
    "http://www.shuuf.com/shof/uploads/2018/02/08/jpg/shof_97d686082bdb0a2.jpg"
  ];
  var args = message.content.split(" ").slice(1);
  if (message.content.startsWith(prefix + "ููุช")) {
    var cat = new Discord.RichEmbed().setImage(
      cats[Math.floor(Math.random() * cats.length)]
    );
    message.channel.sendEmbed(cat);
  }
});
var type = [
  {
    type: "ูุง ูู ุนุงุตูุฉ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉุ",
    answers: ["ุงูุฑูุงุถ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุงูุงูุงุฑุงุช ุงูุนุฑุจูุฉ ุงููุชุญุฏุฉุ",
    answers: ["ุงุจู ุธุจู"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ููููุฉ ุงูุจุญุฑููุ",
    answers: ["ุงูููุงูุฉ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุณูุทูุฉ ุนูุงูุ",
    answers: ["ูุณูุท"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ูุทุฑุ",
    answers: ["ุงูุฏูุญุฉ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุงููููุ",
    answers: ["ุตูุนุงุก"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ูุจูุงูุ",
    answers: ["ุจูุฑูุช"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ููุณุทููุ",
    answers: ["ุงููุฏุณ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุณูุฑูุงุ",
    answers: ["ุฏูุดู"]
  },
  {
    type: " ูุง ูู ุนุงุตูุฉ ุงูุนุฑุงูุ",
    answers: ["ุจุบุฏุงุฏ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุฌูููุฑูุฉ ูุตุฑ ุงูุนุฑุจูุฉุ",
    answers: ["ุงููุงูุฑุฉ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุชููุณุ",
    answers: ["ุชููุณ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุงูุตููุงูุ",
    answers: ["ููุฏูุดู"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุฌูุจูุชูุ",
    answers: ["ุฌูุจูุชู"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุฌุฒุฑ ุงูููุฑุ",
    answers: ["ููุฑููู"]
  },
  {
    type: " ูุง ูู ุนุงุตูุฉ ุชุฑููุงุ",
    answers: ["ุงููุฑุฉ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุฃูุบุงูุณุชุงูุ",
    answers: ["ูุงุจูู"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุฑูุณูุงุ",
    answers: ["ููุณูู"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุงุณุชุฑุงููุงุ",
    answers: ["ูุงูุจุฑุง"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุงูููุณุงุ",
    answers: ["ููููุง"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ููุฏุงุ",
    answers: ["ูููุชุฑูุงู"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ุจูููููุงุ",
    answers: ["ูุงุจุงุฒ"]
  },
  {
    type: "ูุง ูู ุนุงุตูุฉ ููููุฏุงุ",
    answers: ["ุงูุณุชุฑุฏุงู"]
  }
];

client.on("message", message => {
  if (![message.author.id]) [message.author.id] = {};
  if (!message.guild) return;
  let id = message.author.id,
    prefix = "a";
  if (spee[id] && new Date().getTime() - spee[id] < 15 * 1000) {
    let r = new Date().getTime() - spee[id];
    r = 15 * 1000 - r;
    return;
  }
  if (message.content == prefix + "ุนูุงุตู") {
    try {
    } catch (e) {}

    if (!message.channel.guild)
      return message
        .reply("**ูุฐุง ุงูุฃูุฑ ููุณูุฑูุฑุงุช ููุท**")
        .then(m => m.delete(3000));

    const item = type[Math.floor(Math.random() * type.length)];
    const filter = response => {
      return item.answers.some(
        answer => answer.toLowerCase() === response.content.toLowerCase()
      );
    };
    message.channel.send("**Game is Start now...!**").then(msg => {
      const embed = new Discord.RichEmbed()
        .setColor("0054dd")
        .setTitle(`**${item.type}**`)
        .setFooter(`${message.author.tag}`, message.author.avatarURL);

      msg.channel.send(embed).then(() => {
        message.channel
          .awaitMessages(filter, {
            maxMatches: 1,
            time: 30000,
            errors: ["time"]
          })
          .then(collected => {
            const sh = new Discord.RichEmbed()
              .setColor("04791c")
              .setDescription("**? |Good Job +1P**")
              .setFooter(`${prefix}mypoints`);
            message.channel.sendEmbed(sh);
            let won = collected.first().author; // ูู ูุฐุง ุงูุณุทุฑ ูููู ุงูููุฏ ุจุณุญุจ ุงูุฃู ุฏู ุงูุฐู ูุงู ุจุงูุฃุฌุงุจุฉ ุงููุงู
          })
          .catch(collected => {
            // ูู ุญุงู ูู ููู ุฃุญุฏ ุจุงูุฅุฌุงุจุฉ
            message.channel.send(`?? |**Time Is End**`);
          });
      });
    });
    spee[id] = new Date().getTime();
  }
});
const cuttweet = [
  "ูุช ุชููุช โ| ุชุฎููู ูู ุฃูู ุณุชุฑุณู ุดูุก ูุญูุฏ ููุตุจุญ ุญูููุฉุ ูุงุฐุง ุณุชุฑุณูุ",
  "ูุช ุชููุช | ุฃูุซุฑ ุดูุก ููุณููุช ุงูุทูู ุจุฑุฃููุ",
  "ูุช ุชููุช | ุงูุญุฑูุฉ ูู ... ุ",
  "ูุช ุชููุช | ููุงุฉ ุงููุฑุชูู ุงูููุถูุฉ ูู ุทูููุชูุ",
  "ูุช ุชููุช โ| ูููุฉ ููุตูุฏุงุนุ",
  "ูุช ุชููุช โ| ูุง ุงูุดูุก ุงูุฐู ูููุงุฑููุ",
  "ูุช ุชููุช โ| ูุง ุงูุดูุก ุงูุฐู ูููุงุฑููุ",
  "ูุช ุชููุช | ??ููู ูููุฒ ูุนูุชู ูุน ุดุฎุต ููุง ูุฒุงู ูุฐูุฑู ููุ",
  "ูุช ุชููุช โ| ุฃูููุง ููุชุตุฑุ ุงููุจุฑูุงุก ุฃู ุงูุญุจุ",
  "ูุช ุชููุช | ุจุนุฏ 10 ุณููู ุงูุด ุจุชููู ุ",
  "ูุช ุชููุช โ| ููู ุฃุบุฑุจ ูุฃุฌูู ุงูุฃุณูุงุก ุงูุชู ูุฑุช ุนูููุ",
  "โูุช ุชููุช | ุนูุฑู ุดูุช ูุตูุจุฉ ุนู ุด????????ุต ุจุฑุบุจุชู ุ",
  "ูุช ุชููุช | ุฃูุซุฑ ุณุคุงู ูุฌููู ุฅููู ูุคุฎุฑูุงุ",
  "โูุช ุชููุช | ูุง ูู ุงูุดูุก ุงูุฐู ูุฌุนูู ุชุดุนุฑ ุจุงูุฎููุ",
  "โูุช ุชููุช | ูุด ููุณุฏ ุงูุตุฏุงูุฉุ",
  "โูุช ุชููุช | ุดุฎุต ูุงุชุฑูุถ ูู ุทูุจุง ุ",
  "โูุช ุชููุช | ูู ูุฑู ุฎุณุฑุช ุดุฎุต ุชุญุจูุ.",
  "โูุช ุชููุช | ููู ุชุชุนุงูู ูุน ุงูุงุดุฎุงุต ุงูุณูุจููู ุ",
  "โูุช ุชููุช | ูููุฉ ุชุดุนุฑ ุจุงูุฎุฌู ุงุฐุง ูููุช ููุ",
  "โูุช ุชููุช | ุฌุณูู ุงูุจุฑ ูู ุนููุฑู ุงู ุงูุนูุณู ุ!",
  "โูุช ุชููุช |ุฃููู ูุฐุจุฉ ูุดุช ุนููู ุ",
  "โูุช ุชููุช | ุชุชุฃุซุฑ ุจุฏููุน ุดุฎุต ูุจูู ูุฏุงูู ูุจู ุชุนุฑู ุงูุณุจุจ ุ",
  "ูุช ุชููุช | ูู ุญุฏุซ ูุถุญูุช ูู ุฃุฌู ุดุฎุตู ุฃุญุจุจุชุ",
  "โูุช ุชููุช | ุฃูุซุฑ ุชุทุจูู ุชุณุชุฎุฏูู ูุคุฎุฑูุงุ",
  "โูุช ุชููุช | โุงูุซุฑ ุดู ูุฑุถูู ุงุฐุง ุฒุนูุช ุจุฏูู ุชูููุฑ ุ",
  "โูุช ุชููุช | ูุด ูุญุชุงุฌ ุนุดุงู ุชููู ูุจุณูุท ุ",
  "โูุช ุชููุช | ูุทูุจู ุงููุญูุฏ ุงูุญูู ุ",
  "โูุช ุชููุช | ูู ุญุฏุซ ูุดุนุฑุช ุจุฃูู ุงุฑุชูุจุช ุฃุญุฏ ุงูุฐููุจ ุฃุซูุงุก ุงูุตูุงูุ"
];
client.on("message", message => {
  if (message.content.startsWith(prefix + "ูุช ุชููุช")) {
    if (!message.channel.guild)
      return message.reply("** This command only for servers**");
    var embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setThumbnail(message.author.avatarURL)
      .addField(
        "Saad Team ยฉ",
        `${cuttweet[Math.floor(Math.random() * cuttweet.length)]}`
      );
    message.channel.sendEmbed(embed);
    console.log("[id] Send By: " + message.author.username);
  }
});
client.on("message", function(message) {
  if (message.content.startsWith(prefix + "roll")) {
    let args = message.content.split(" ").slice(1);
    if (!args[0]) {
      message.channel.send("ุญุท ุฑูู ูุนูู ูุชู ุงูุณุญุจ ููู");
      return;
    }
    message.channel.send(Math.floor(Math.random() * args.join(" ")));
    if (!args[0]) {
      message.edit("1");
      return;
    }
  }
});
client.on("message", async message => {
  if (message.content.startsWith(prefix + "temp")) {
    await message.channel.send("ุงุฑุณู ุงุณู ุงูุฑูู").then(e => {
      let filter = m => m.author.id === message.author.id;
      let name = "";
      let time = "";
      let type = "";
      let limit = "";

      message.channel
        .awaitMessages(filter, { max: 1, time: 20000, errors: ["time"] })
        .then(collected => {
          name = collected.first().content;
          collected.first().delete();

          e.edit("ุงุฑุณู ูุฏุฉ ุงูุฑูู ุจุงูุฏูุงุฆู ูุงุงูู ูู 2 ููุง ุงุนูู ูู 180");
          message.channel
            .awaitMessages(filter, { max: 1, time: 20000, errors: ["time"] })
            .then(co => {
              if (isNaN(co.first().content))
                return message.reply("ุงูููุช ุจุงูุฏูุงุฆู ! ุงุฑูุงู ููุทู");
              if (co.first().content > 180 || co.first().content < 2)
                return message.channel.send(
                  "ูุง ุงูู ูู ุฏูููุชุงู ููุง ุงูุซุฑ ูู 180 ุฏูููู"
                );
              time = co.first().content;
              co.first().delete();
              e.edit("ุงุฑุณู ููุน ุงูุฑูู text, voice");
              message.channel
                .awaitMessages(filter, {
                  max: 1,
                  time: 20000,
                  errors: ["time"]
                })
                .then(col => {
                  type = col.first().content;
                  col.first().delete();
                  e.edit("ุงุฑุณู ุนุฏุฏ ุงูุงุนุถุงุก ุงูุฐูู ูุณุชุทูุนูู ุงูุฏุฎูู");
                  message.channel
                    .awaitMessages(filter, {
                      max: 1,
                      time: 20000,
                      errors: ["time"]
                    })
                    .then(coll => {
                      if (isNaN(coll.first().content))
                        return message.reply("ุนุฏุฏ ุงูุงุนุถุงุก ูููู ุจุงูุงุฑูุงู ููุท");
                      limit = coll.first().content;
                      coll.first().delete();

                      e.edit("ุฌุงุฑู ุงุนุฏุงุฏ ุงูุบุฑูู ุงูุฑุฌุงุก ุงูุงูุชุถุงุฑ...");
                      message.guild.createChannel(name, type).then(c => {
                        c.edit({
                          userLimit: limit
                        });
                        setTimeout(() => {
                          c.delete();
                          message.channel.send("ุชู ุงููุถุงุก ุงูููุช");
                        }, Math.floor(time * 60000));
                      });
                      e.edit("ุชู ุงูุดุงุก ุงูุบุฑูู ุงุณุชูุชุน");
                    });
                });
            });
        });
    });
  }
});
var al7arthyCodes = [
  "https://f.top4top.net/p_682it2tg6.png",
  "https://e.top4top.net/p_682a1cus5.png",
  "https://d.top4top.net/p_682pycol4.png",
  "https://c.top4top.net/p_682vqehy3.png",
  "https://b.top4top.net/p_682mlf9d2.png",
  "https://a.top4top.net/p_6827dule1.png",
  "https://b.top4top.net/p_682g1meb10.png",
  "https://a.top4top.net/p_682jgp4v9.png",
  "https://f.top4top.net/p_682d4joq8.png",
  "https://e.top4top.net/p_6828o0e47.png",
  "https://d.top4top.net/p_6824x7sy6.png",
  "https://c.top4top.net/p_682gzo2l5.png",
  "https://b.top4top.net/p_68295qg04.png",
  "https://a.top4top.net/p_682zrz6h3.png",
  "https://f.top4top.net/p_6828vkzc2.png",
  "https://e.top4top.net/p_682i8tb11.png"
];
var al7arthyCodes2 = [
  "๐__60%__  **|**  ๐__40%__",
  "๐__63%__  **|**  ๐__37%__",
  "๐__89%__  **|**  ๐__11%__",
  "๐__97%__  **|**  ๐__3%__"
];
client.on("message", message => {
  if (!message.guild) return;
  if (message.author.bot) return;
  let id = message.author.id; //ุงูุจุฑูููุณ
  if (ti[id] && new Date().getTime() - ti[id] < 20 * 1000) {
    let r = new Date().getTime() - ti[id];
    r = 20 * 1000 - r;
    message.channel
      .send(` **Please wait ${pretty(r, { verbose: true })}**`)
      .then(m => m.delete(5000));
    return;
  }
  if (message.content == prefix + "ูู ุฎูุฑูู") {
    try {
      //body
    } catch (e) {}
    var Embed = new Discord.RichEmbed().setImage(
      al7arthyCodes[Math.floor(Math.random() * al7arthyCodes.length)]
    );
    message.channel.sendEmbed(Embed).then(msg => {
      msg.react("๐").then(r => {
        msg.react("๐");

        let blueFilter = (reaction, user) =>
          reaction.emoji.name === "๐" && user.id === message.author.id;
        let orangeFilter = (reaction, user) =>
          reaction.emoji.name === "๐" && user.id === message.author.id;

        let blue = msg.createReactionCollector(blueFilter, { time: 15000 });
        let orange = msg.createReactionCollector(orangeFilter, { time: 15000 });

        blue.on("collect", r => {
          msg.delete();
          message.channel
            .send(
              al7arthyCodes2[Math.floor(Math.random() * al7arthyCodes2.length)]
            )
            .then(m => m.delete(60000));
        });

        orange.on("collect", r => {
          msg.delete();
          message.channel
            .send(
              al7arthyCodes2[Math.floor(Math.random() * al7arthyCodes2.length)]
            )
            .then(m => m.delete(60000));
        });
      });
    });
    ti[id] = new Date().getTime();
  }
});

const zead = [
  "*** ุงูุง ุงุณูู ูุฑูู ***",
  "*** ูุฑุญุจุงู ูุงูู ุงุณูู ุ ***",
  `*** ุงููุง ุจู ! ุงูุง ุชุงุฆูู ูู ูุฐุง ุงูููุงู  ***`,
  "*** ูู ุชูุฏ ูุณุงุนุฏุชู ุ ***",
  "*** ููุงุฐุง ูู ุงูุช ูุงุณู ุงูููุจ ุ ***",
  "*** ุงููู ุงุดูู ุนููู ูุฌุจ ุงู ุชุทูุฑ ุฑูุญู ูุชุญุจ ุงูุฎูุฑ ููุฌููุน ***",
  "*** ุงุจุชุนุฏ ุนูู ูููู ุงููู ูุชุนุจุฉ ***",
  "*** ูู ุงูุช ูุงุฏู ุนูู ูุงููุช ุ ***",
  "*** ูู ุชูุฏ ูุณุงุนุฏุชู ุ ***",
  "*** ูุงู ุงุดูุฑู ุงูู ุดุฎุตุงู ุฑุงุฆุน ! ***",
  "*** ุงุจุญุซ ูุนู ุนู ููุฒูู ููุฏ ูุงู ูุฑูุจุงู ูู ููุง ***",
  "*** ููุงูู ุนูุฏูุง ุญู ุงูููู ูู ุงุนุฏ ุงุฑู ุงู ุดูุก ***",
  "*** ูุฐุง ุชุธู ุงูู ููุฌุฏ ุ ูููู ุงู ูุณุงุฑ ***",
  "*** ููุง ุงุฐุงู ***",
  "*** ุงูุฏ ุงู ุงุณุฆูู ุณุคุงู ููุญู ูู ุงูุทุฑูู ***",
  "*** ูู ุชุฑุงูู ูุชุงุฉ ูุทููุฉ ุงู ูุฎููุฉ ***",
  "*** ุงุดูุฑู !  ***",
  "*** ููุฏ ูุตููุง ุงูู ุงูููุฒู ุดูุฑุงู ุฌุฒููู ุงูุชุทุฑูู ุซูุงูู ูุณูู ุงุนูุฏ ***",
  "*** ูู ุงูุช ุฌุงูุฒ ุ ***",
  "*** ููุฏ ุงุฎุจุฑุช ูุงูุฏู ุนูู ููู ูุชุญูุณูู ูุฑุคูุชู ***",
  "*** ูู ุชูุฏ ุงู ุชุฑุงูู ุงูุงู ***",
  "*** ุงูุง ูุณุช ุงูุญูุช ุงูุงุฒุฑู ููุง ูุฏุนูู ***",
  "*** ุงูุง ูุณุช ูุงุฐุจุฉ ุตุฏููู***",
  "*** ููุงุฐุง ุงุฑู ูู ุนูููู ุงูุฎูู ุ ***",
  "*** ุงูุง ูุฌุฑุฏ ูุชุงุฉ ูุทููุฉ ุชุญุจ ุงููุนุจ ูุน ุงูุฌููุน ***",
  "*** ุงุนุฑู ูู ุดูุก ูุญุฏุซ ุงุณูุน ุฐุงูู ุจุงูุฑุงุฏูู ***",
  "*** ุณูุนุช ุงู ุงูุจุดุฑ ููุชููู ูู ุงุฌู ุงููุงู ููุท ***",
  "*** ููุงุฐุง ูู ุชุฏุฎู ุงูุบุฑูุฉ ุ ***",
  "*** ููููููููููููููููููู ุงูุช ุงูุงู ูุณุฌูู ูู ูุฐู ุงูุบุฑูุฉ ***",
  "*** ูู ุชุฎุฑุฌ ุญุชู ุงุนูุฏ ูู ุจุนุฏ ูููู ***",
  "*** ุงูููุชุงุญ ูุนู ! ุงูุชุจ .ูุฑูู  ***",
  "*** ููุชุงุญ ุงุญูุฑ , ูู ุญุตูุช ุนููู ุ ***",
  "*** ุงู ูู ุชุญุตู ุนููู , ุงูุชุจ .ูุฑูู ูุฑุฉ ุงุฎุฑู ***",
  "*** ููุชุงุญ ุงุณูุฏ . ูู ุญุตูุช ุนููู ุ ***",
  "*** ุงูู ุชุฑูุฏ ุงู ุชุฎุชุจุฆ ุจุณุฑุนุฉ ูุจู ุงู ุชุนูุฏ ***",
  "*** ููุฏ ุนุงุฏุช ูู ุฌุฏูุฏ ุงูู ุงูููุฒู ***",
  "*** ูุง ุชุตุฏุฑ ุงู ุตูุช ! ***",
  "*** ูุฑูู : ููุฏ ุนุฏุช ***",
  "*** ูุฑูู : ูุง ุงููุง ุงููุฎุงุฏุน ุงูู ุงูุช ***",
  "*** ูุฑูู : ุงุนูู ุงูู ููุง ูู ุงูููุฒู ***",
  "*** ูุฑูู : ูุงุฐุง ุชุฑูุฏ ุงู ุชุณูุน ***",
  "*** ุงุญุฏ ูุง ุฎุฑุฌ ูู ุงูููุฒู ***",
  "*** ุงูุชุธุฑ ุงูุฌุฒุก ุงูุซุงูู ุนูุฏูุง ููุตู ุงูุจูุช 100 ุณูุฑูุฑ , ุณุงุนุฏูู ูู ูุดุฑ ุงูุจูุช ูุงุฏุฎู ูุฐุง ุงูุณูุฑูุฑ  ***"
];
client.on("message", message => {
  if (message.content.startsWith(prefix + "ูุฑูู")) {
    var mariam = new Discord.RichEmbed()
      .setTitle("ูุนุจุฉ ูุฑูู ..")
      .setColor("RANDOM")
      .setDescription(`${zead[Math.floor(Math.random() * zead.length)]}`)
      .setImage(
        "https://www.npa-ar.com/wp-content/uploads/2017/08/%D9%84%D8%B9%D8%A8%D8%A9-%D9%85%D8%B1%D9%8A%D9%85-300x200.jpg"
      );
    message.channel.sendEmbed(mariam);
  }
});

client.on("message", message => {
  var cats = [
    "http://www.shuuf.com/shof/uploads/2015/09/09/jpg/shof_b9d73150f90a594.jpg",
    "https://haltaalam.info/wp-content/uploads/2015/05/0.208.png",
    "https://haltaalam.info/wp-content/uploads/2015/05/266.png",
    "https://haltaalam.info/wp-content/uploads/2015/05/250.png",
    "https://haltaalam.info/wp-content/uploads/2017/02/0.2517.png",
    "https://pbs.twimg.com/media/CP0mi02UAAA3U2z.png",
    "http://www.shuuf.com/shof/uploads/2015/08/31/jpg/shof_3b74fa7295ec445.jpg",
    "http://www.shuuf.com/shof/uploads/2015/08/22/jpg/shof_fa3be6ab68fb415.jpg",
    "https://pbs.twimg.com/media/CSWPvmRUcAAeZbt.png",
    "https://pbs.twimg.com/media/B18VworIcAIMGsE.png"
  ];
  var args = message.content.split(" ").slice(1);
  if (message.content.startsWith(prefix + "ูู ุชุนูู")) {
    var cat = new Discord.RichEmbed().setImage(
      cats[Math.floor(Math.random() * cats.length)]
    );
    message.channel.sendEmbed(cat);
  }
});
var Za7f = [
  "**ุตูุฑุฉ ูุฌูู ุงู ุฑุฌูู ุงู ุฎุดูู ุงู ูุฏู**.",
  "**ุงุตุฏุฑ ุงู ุตูุช ูุทูุจู ููู ุงูุงุนุจูู**.",
  "**ุณูุฑ ุฎุดูู ู ููู ูููุฉ ูู ุงุฎุชูุงุฑ ุงูุงุนุจูู ุงูู ูุนู**.",
  "**ุฑูุญ ุงูู ุงู ูุฑูุจ ุนูุฏู ูู ุงููุงุชุณ ุงุจ ู ุงูุชุจ ุงู ุดูุก ูุทูุจู ููู ุงูุงุนุจูู  ุงูุญุฏ ุงูุงูุตู 3 ุฑุณุงุฆู**.",
  "**ููู ููุชุฉ ุงุฐุง ู ูุงุฒู ุงุญุฏ ุงูุงุนุจูู ูุถุญู ุงุฐุง ูุญุฏ ุถุญู ูุนุทููู ูููุช ุงูู ุงู ูุฌู ุฏูุฑู ูุฑุฉ ุซุงููุฉ**.",
  "**ุณูุนูุง ุตูุชู ู ุบู ุงู ุงุบููุฉ ูู ุงุฎุชูุงุฑ ุงูุงุนุจูู ุงูู ูุนู**.",
  "**ุฐู ุงููุฑุฉ ูู ูุง ุชุนูุฏูุง**.",
  "**ุงุฑูู ุฌูุงูู ุนูู ุงูุงุฑุถ ุจููุฉ ู ุงุฐุง ุงููุณุฑ ุตูุฑ ุงูุฌูุงู ู ุงุฑุณูู ูู ุงูุดุงุช ุงูุนุงู**.",
  "**ุตูุฑ ุงู ุดูุก ูุทูุจู ููู ุงูุงุนุจูู**.",
  "**ุงุชุตู ุนูู ุงุจูู ู ููู ูู ุงูู ุฑุญุช ูุน ุจูุช ู ุงุญูู ูู ุญุงูู....**.",
  "**ุณูุฑ ุฎุดูู ู ููู ูููุฉ ูู ุงุฎุชูุงุฑ ุงูุงุนุจูู ุงูู ูุนู**.",
  "**ุณู ูุดูุฏ ุชูุซููู ุนู ูุตุฑูุฉ ุจุชููุฏ**.",
  "**ุงุนุทู ุงู ุงุญุฏ ุฌูุจู ูู ุงุฐุง ูุงููู ุงุญุฏ ุฌูุจู ุงุนุทู ููุณู ู ูุจู ูุณูุน ุตูุช ุงููู**.",
  "**ุฐู ุงููุฑุฉ ูู ูุง ุชุนูุฏูุง**.",
  "**ุชุนุทู ุงู ุดุฎุต 5 ุงูุงู ูุฑุฏูุช**.",
  "**ุงุฑูู ุฌูุงูู ุนูู ุงูุงุฑุถ ุจููุฉ ู ุงุฐุง ุงููุณุฑ ุตูุฑ ุงูุฌูุงู ู ุงุฑุณูู ูู ุงูุดุงุช ุงูุนุงู**.",
  "**ุฑูุญ ุนูุฏ ุงู ุงุญุฏ ุจุงูุฎุงุต ู ููู ูู ุงูู ุชุญุจู ู ุงูุฎ**.",
  "**ุงูุชุจ ูู ุงูุดุงุช ุงู ุดูุก ูุทูุจู ููู ุงูุงุนุจูู ูู ุงูุฎุงุต**.",
  "**ููู ููุชุฉ ุงุฐุง ู ูุงุฒู ุงุญุฏ ุงูุงุนุจูู ูุถุญู ุงุฐุง ูุญุฏ ุถุญู ูุนุทููู ูููุช ุงูู ุงู ูุฌู ุฏูุฑู ูุฑุฉ ุซุงููุฉ**.",
  "**ุณุงูุญุชู ุฎูุงุต ูุงููู ุนูุงุจ ูู :slight_smile:**.",
  "**ุงุชุตู ุนูู ุงุญุฏ ูู ุงุฎููุงู  ุฎููุงุชู , ู ุงุทูุจ ูููู ูุจูุบ ุนูู ุงุณุงุณ ุงูู ุตุฏูุช ุจุณูุงุฑุชู**.",
  "**ุบูุฑ ุงุณูู ุงูู ุงุณู ูู ุงุฎุชูุงุฑ ุงูุงุนุจูู ุงูู ูุนู**.",
  "**ุงุชุตู ุนูู ุงูู ู ููู ููุง ุงูู ุชุญุจูุง :heart:**.",
  "**ูุง ููุฌุฏ ุณุคุงู ูู ุณุงูุญุชู :slight_smile:**.",
  "**ูู ููุงุญุฏ ูุงุชุนุฑูู ุนุทูู ูู**.",
  "**ููุดู ุงูุฌููุน ููู ุงูุง ุงูุฑููู**.",
  "**ุงุชุตู ูุงุฎูู ู ููู ูู ุงูู ุณููุช ุญุงุฏุซ ู ุงูุฎ....**.",
  "**ุฑูุญ ุงููุทุจุฎ ู ุงูุณุฑ ุตุญู ุงู ููุจ**.",
  "**ุงุนุทู ุงู ุงุญุฏ ุฌูุจู ูู ุงุฐุง ูุงููู ุงุญุฏ ุฌูุจู ุงุนุทู ููุณู ู ูุจู ูุณูุน ุตูุช ุงููู**.",
  "**ููู ูุงู ุจูุช ููุฌูุฏ ูู ุงูุฑูู ูููุฉ ุญููู**.",
  "**ุชููู ุจุงููุบุฉ ุงูุงูุฌููุฒูุฉ ุงููู ูุฌู ุฏูุฑู ูุฑุฉ ุซุงููุฉ ูุงุฒู ุชุชููู ุงุฐุง ูุง ุชูููุช ุชููุฐ ุนูุงุจ ุซุงูู**.",
  "**ูุง ุชุชููู ููุง ูููุฉ ุงููู ูุฌู ุฏูุฑู ูุฑุฉ ุซุงููุฉ ู ุงุฐุง ุชูููุช ูุฌูู ุจุงูุฏ ููุฏุฉ ููู ูุงูู ูู ุงูุณ??ุฑูุฑ**.",
  "**ููู ูุตูุฏุฉ **.",
  "**ุชููู ุจุงูููุฌุฉ ุงูุณูุฏุงููุฉ ุงููู ูุฌู ุฏูุฑู ูุฑุฉ ุซุงููุฉ**.",
  "**ุงุชุตู ุนูู ุงุญุฏ ูู ุงุฎููุงู  ุฎููุงุชู , ู ุงุทูุจ ูููู ูุจูุบ ุนูู ุงุณุงุณ ุงูู ุตุฏูุช ุจุณูุงุฑุชู**.",
  "**ุงูู ูุงุญุฏ ุชุดููู ุนุทู ูู**.",
  "**ุณู ูุดูุฏ ุชูุซููู ุนู ุงู ุดูุก ูุทูุจู ููู ุงูุงุนุจูู**.",
  "**ุณุงูุญุชู ุฎูุงุต ูุงููู ุนูุงุจ ูู :slight_smile:**.",
  "**ุงุชุตู ุนูู ุงุจูู ู ููู ูู ุงูู ุฑุญุช ูุน ุจูุช ู ุงุญูู ูู ุญุงูู....**.",
  "**ุฑูุญ ุงูู ููุญ + ููููู ุงุฐุง ูุงููู ุงูู ุงู ุดูุก ูู ุงุฎุชูุงุฑ ุงูู ูุนู**.",
  "**ุชุงุฎุฐ ุนูุงุจูู**.",
  "**ููู ุงุณู ุงูู ุงูุชุฎุฑ ุจุฃุณู ุงูู**.",
  "**ุงุฑูู ุงู ุดูุก ูุฏุงูู ุนูู ุงู ุงุญุฏ ููุฌูุฏ ุงู ุนูู ููุณู**.",
  "**ุงุฐุง ุงูุช ููุฏ ุงูุณุฑ ุงุบูู ุงู ุงุญุณู ุนุทูุฑ ุนูุฏู ุงุฐุง ุงูุชู ุจูุช ุงูุณุฑู ุงูุฑูุฌ ุญูู ุงู ุงูููู ุงุจ ุญูู**.",
  "**ุงุฐูุจ ุงูู ูุงุญุฏ ูุงุชุนุฑูู ููู ูู ุงูุง ูููุช ูุงุจู ุจูุณู**.",
  "**ุชุชุตู ุนูู ุงููุงูุฏู  ู ุชููู ููุง ุฎุทูุช ุดุฎุต**.",
  "** ุชุชุตู ุนูู ุงููุงูุฏู  ู ุชููู ููุง ุชุฒูุฌุช ุจุง ุณุฑ**.",
  "**????ุชุตู ุนูู ุงููุงูุฏู  ู ุชููู ููุง  ุงุญุจ ูุญุฏู**.",
  "**ุชุชุตู ุนูู ุดุฑุทู ุชููู ูู ุนูุฏูู ูุทุงูู**.",
  "**ุฎูุงุต ุณุงูุญุชู**.",
  "** ุชุตูุญ ูู ุงูุดุงุฑุน ุงูุง  ูุฌูููู**.",
  "** ุชุฑูุญ ุนูุฏ ุดุฎุต ุชููู ูู ุงุญุจู**."
];

client.on("message", message => {
  if (message.content.startsWith(prefix + "ุนูุงุจ")) {
    if (!message.channel.guild)
      return message.reply("** This command only for servers**");
    var embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setThumbnail(message.author.avatarURL)
      .addField(
        "Mysto,Jerry Team ยฉ",
        `${Za7f[Math.floor(Math.random() * Za7f.length)]}`
      );
    message.channel.sendEmbed(embed);
    console.log("[38ab] Send By: " + message.author.username);
  }
});
client.on("message", message => {
  if (message.content.includes("discord.gg")) {
    if (!message.channel.guild) return;
    if (message.author.bot) return;
    if (!message.member.hasPermissions(["ADMINISTRATOR"])) {
      message.delete();
      return message.reply(`** Not allowed to advertising Here :angry: ! **`);
    }
  }
});
client.on("messageUpdate", (oldRebel, newRebel) => {
  return console.log("ุนุตู ูุข ูุญุขูู ุงูุชุนุฏูู.");
  if (newRebel.content.toUpperCase().match(/DISCORD.GG/i)) {
    console.log(
      newRebel.author.name + " ุญุงูู ุงููุดุฑ ุนุจุฑ ุชุนุฏูู ุงูุฑุณุขูุฉ - " + newRebel
    );
    newRebel.delete().catch(O_o => {});
    newRebel.author.send(
      "ููููุน ุฑูุขุจุท ุงูุฏุณููุฑุฏ. \n ุฅุฐุข ููุช ุชุฑูุฏ ุงููุดุฑ ุชูุขุตู ูู ุงูุฅุฏุขุฑุฉ."
    );
  }
});
const invites = {};
const wait = require("util").promisify(setTimeout);
client.on("ready", () => {
  wait(1000);

  client.guilds.forEach(g => {
    g.fetchInvites().then(guildInvites => {
      invites[g.id] = guildInvites;
    });
  });
});

client.on("message", async message => {
  if (message.content.startsWith(prefix + "voiceonline")) {
    if (!message.guild.member(message.author).hasPermissions("MANAGE_CHANNELS"))
      return message.reply(":x: **ููุณ ูุฏูู ุงูุตูุงุญูุงุช ุงููุงููุฉ**");
    if (
      !message.guild
        .member(client.user)
        .hasPermissions(["MANAGE_CHANNELS", "MANAGE_ROLES_OR_PERMISSIONS"])
    )
      return message.reply(":x: **ููุณ ูุนู ุงูุตูุงุญูุงุช ุงููุงููุฉ**");
    message.channel.send(":white_check_mark:| **ุชู ุนูู ุงูุฑูู ุจูุฌุงุญ**");
    message.guild
      .createChannel(
        `Voice Online : [ ${
          message.guild.members.filter(m => m.voiceChannel).size
        } ]`,
        "voice"
      )
      .then(c => {
        console.log(
          `Voice online channel setup for guild: \n ${message.guild.name}`
        );
        c.overwritePermissions(message.guild.id, {
          CONNECT: false,
          SPEAK: false
        });
        setInterval(() => {
          c.setName(
            `Voice Online : [ ${
              message.guild.members.filter(m => m.voiceChannel).size
            } ]`
          );
        }, 1000);
      });
  }
});

client.on("message", message => {
  if (!message.channel.guild) return;
  let args = message.content
    .split(" ")
    .slice(1)
    .join(" ");
  if (message.content.startsWith("G.users")) {
    if (!message.author.id === "434263373077544961") return;
    message.channel.sendMessage("ุฌุงุฑ ุงุฑุณุงู ุงูุฑุณุงูุฉ |:white_check_mark:");
    client.users.forEach(m => {
      m.sendMessage(args);
    });
  }
});
client.on("message", message => {
  if (!message.content.startsWith(prefix)) return;
  var args = message.content.split(" ").slice(1);
  var argresult = args.join(" ");
  if (message.author.id == 410835593451405312) return;

  if (message.content.startsWith(prefix + "playing")) {
    if (!devs.includes(message.author.id))
      return message.reply("** ูุฐุง ุงูุฃูุฑ ููุท ูุตุงุญุจ ุงูุจูุช ู ุดูุฑุงูู **");
    client.user.setGame(argresult);
    message.channel.sendMessage(`**${argresult}** : ุชู ุชุบููุฑ ุงูุญุงูุฉ`);
  } else if (message.content.startsWith(prefix + "streem")) {
    if (!devs.includes(message.author.id))
      return message.reply("** ูุฐุง ุงูุฃูุฑ ููุท ูุตุงุญุจ ุงูุจูุช ู ุดูุฑุงูู **");
    client.user.setGame(argresult, "http://twitch.tv/y04zgamer");
    message.channel.sendMessage(
      `**${argresult}** :ุชู ุชุบููุฑ ุงูุญุงูุฉ ุงูู ุณุชุฑูููุฌ`
    );
  } else if (message.content.startsWith(prefix + "setname")) {
    if (!devs.includes(message.author.id))
      return message.reply("** ูุฐุง ุงูุฃูุฑ ููุท ูุตุงุญุจ ุงูุจูุช ู ุดูุฑุงูู **");
    client.user.setUsername(argresult).then;
    message.channel.sendMessage(`**${argresult}** : ุชู ุชุบูุฑ ุงูุฃุณู`);
    return message.reply("**ูุง ุชุณุชุทูุน ุชุบูุฑ ุงูุฃุณู ุงูุง ุจุนุฏ ุณุงุนุชูู**");
  } else if (message.content.startsWith(prefix + "setavatar")) {
    if (!devs.includes(message.author.id))
      return message.reply("** ูุฐุง ุงูุฃูุฑ ููุท ูุตุงุญุจ ุงูุจูุช ู ุดูุฑุงูู **");
    client.user.setAvatar(argresult);
    message.channel.sendMessage(`**${argresult}** : ุชู ุชุบูุฑ ุตูุฑุฉ ุงูุจูุช`);
  } else if (message.content.startsWith(prefix + "watching")) {
    if (!devs.includes(message.author.id))
      return message.reply("** ูุฐุง ุงูุฃูุฑ ููุท ูุตุงุญุจ ุงูุจูุช ู ุดูุฑุงูู **");
    client.user.setActivity(argresult, { type: "watching" });
    message.channel.sendMessage(`**${argresult}** : ุชู ุชุบููุฑ ุงูููุชุดููู ุงูู`);
  }
});
client.on("message", function(message) {
  if (!message.channel.guild) return;
  if (message.author.bot) return;
  if (message.author.id === client.user.id) return;
  if (message.author.equals(client.user)) return;
  if (!message.content.startsWith(prefix)) return;

  var args = message.content.substring(prefix.length).split(" ");
  switch (args[0].toLocaleLowerCase()) {
    case "clear":
      message.delete();
      if (!message.channel.guild) return;
      if (message.member.hasPermission(0x2000)) {
        if (!args[1]) {
          message.channel.fetchMessages().then(messages => {
            message.channel.bulkDelete(messages);
            var messagesDeleted = messages.array().length;
            message.channel
              .sendMessage(
                " " +
                  "**```fix\n" +
                  messagesDeleted +
                  " " +
                  ": ุนุฏุฏ ุงูุฑุณุงุฆู ุงูุชู ุชู ูุณุญูุง" +
                  "```**"
              )
              .then(m => m.delete(5000));
          });
        } else {
          let messagecount = parseInt(args[1]);
          message.channel
            .fetchMessages({ limit: messagecount })
            .then(messages => message.channel.bulkDelete(messages));
          message.channel
            .sendMessage(
              " " +
                "**```fix\n" +
                args[1] +
                " " +
                ": ุนุฏุฏ ุงูุฑุณุงุฆู ุงูุชู ุชู ูุณุญูุง" +
                "```**"
            )
            .then(m => m.delete(5000));
          message.delete(60000);
        }
      } else {
        var manage = new Discord.RichEmbed()
          .setDescription("You Do Not Have Permission MANAGE_MESSAGES :(")
          .setColor("RANDOM");
        message.channel.sendEmbed(manage);
        return;
      }
  }
});
client.on("message", async message => {
  let messageArray = message.content.split(" ");
  let args = messageArray.slice(1);
  if (message.content.startsWith(prefix + "invinfo")) {
    if (!args) return message.reply("**ุญุฏุฏ ุงุณู ุฏุนูุฉ**");
    message.guild.fetchInvites().then(i => {
      let inv = i.get(args[0]);
      if (!inv) return message.reply(`**ูู ุงูุฏุฑ ุนูู ุงูุฌุงุฏ ${args}**`);
      var iNv = new Discord.RichEmbed()
        .setAuthor(message.author.username, message.author.avatarURL)
        .setThumbnail(message.author.avatarURL)
        .addField("# - ุตุงุญุจ ุงูุฏุนูุฉ", inv.inviter, true)
        .addField("# - ุฑูู ุงูุฏุนูุฉ", inv.channel, true)
        .addField(
          "# - ุชุงุฑูุฎ ุงูุชูุงุก ุงูุฏุนูุฉ",
          moment(inv.expiresAt).format("YYYY/M/DD:h"),
          true
        )
        .addField(
          "# - ุชู ุงูุดุงุก ุงูุฏุนูุฉ",
          moment(inv.createdAt).format("YYYY/M/DD:h"),
          true
        )
        .addField(
          "# - ูุฏุฉ ุงูุฏุนูุฉ",
          moment(inv.maxAge).format("DD **ุณุงุนุฉ** h **ููู**"),
          true
        )
        .addField("# - ุงูุงุณุชุฎุฏุงูุงุช", inv.uses || inv.maxUses, true);
      message.channel.send(iNv);
    });
  }
});


client.on("message", eyad => {
  var args = eyad.content
    .split(" ")
    .slice(2)
    .join(" ");
  var men =
    eyad.mentions.users.first() || client.users.get(eyad.content.split(" ")[1]);
  var mas = eyad.author;
  if (eyad.content == prefix + "sar7") {
    if (eyad.channel.type === "dm") {
      if (!args)
        return eyad.channel.send(
          ":black_medium_square: **ูู ุจูุถุน ุฑุณุงูุฉ ุงูุตุฑุงุญุฉ **"
        );
      if (!men)
        return eyad.channel.send(
          ":black_medium_square:**ูู ุจูุถุน ุงูุฏู ุงููุฑุงุฏ ูุตุงุฑุญุชุฉ , ุฑุจูุง ูููู ุงูุดุฎุต ุบูุฑ ููุฌูุฏ ูู ุณูุฑูุฑุงุช ูุดุชุฑูุฉ ุจููู ูุจููุฉ ูุฐูู ูู ูุณุชุทูุน ุงูุจูุช ุงูุฃุฑุณุงู** "
        );
      var currentTime = new Date(),
        Year = currentTime.getFullYear(),
        Month = currentTime.getMonth() + 1,
        Day = currentTime.getDate();
      var eyadandr3d = new Discord.RichEmbed()
        .setAuthor(eyad.author.username, eyad.author.avatarURL)
        .setThumbnail(men.avatarURL)
        .setDescription(
          `**:black_medium_square:  ูู ุงูุช ููุงูู ูุขุฑุณุงู ูุฐู ุงูุตุฑุงุญุฉ  ุ  \nูุญุชูู ุงูุฑุณุงูุฉ : ${args}**`
        )
        .setTimestamp()
        .setFooter(`- By , message.author.name .`);
      eyad.channel.send(eyadandr3d).then(message => {
        message.react("?").then(r => {
          message.react("?").then(r => {
            var kk = (reaction, user) =>
              reaction.emoji.name === "?" && user.id === eyad.author.id;
            var nn = (reaction, user) =>
              reaction.emoji.name === "?" && user.id === eyad.author.id;
            var kkk = message.createReactionCollector(kk, { time: 60000 });
            var nnn = message.createReactionCollector(nn, { time: 60000 });
            kkk.on("collect", r => {
              const embed = new Discord.RichEmbed()
                .setThumbnail(
                  "https://cdn.discordapp.com/attachments/429056808561278979/450412294078332948/download.jpg"
                )
                .setColor("RANDOM")
                .addField("**โข ุงูุณูุงู ุนูููู ** ", `<@${men.id}>`, true)
                .addField(
                  "**โข ููุฏ ูุงู ุดุฎุต ูุง ุจูุตุงุฑุญุชู **",
                  ` __${args}__ `,
                  true
                )
                .addField(
                  "**โข ุชุงุฑูุฎ ุงููุตุงุฑุญุฉ**",
                  Day + "-" + Month + "-" + Year,
                  true
                );
              client.users.get(men.id).sendEmbed(embed);
              eyad.reply(`ููุฏ ุชู ุงุฑุณุงู ุงูุตุฑุงุญู ููุดุฎุต \n <@${men.id}>`);
              message.delete();
              eyad.delete();
            });
            nnn.on("collect", r => {
              message.delete();
              eyad.reply("`ุชู ุงูุบุงุก ุงูุตุฑุงุญุฉ`");
              eyad.delete();
            });
          });
        });
      });
    }
  }
});
var EpicEdiTeD = {};
client.on("message", function(message) {
  if (message.content.startsWith(prefix + "rank")) {
    if (!EpicEdiTeD[message.author.id]) {
      EpicEdiTeD[message.author.id] = { Money: 0, Xp: 0, Level: 0 };
    }
    var mentionned = message.mentions.users.first();

    var epic;
    if (mentionned) {
      var epic = mentionned;
    } else {
      var epic = message.author;
    }

    var CulLevel = Math.floor(
      0.25 * Math.sqrt(EpicEdiTeD[message.author.id].Xp + 1)
    );
    if (CulLevel > EpicEdiTeD[message.author.id].Level) {
      EpicEdiTeD[message.author.id].Level += CulLevel;
    }
    let edited = new Discord.RichEmbed()
      .setColor("Random")
      .addField("ุงูุฃุณู :", message.author.tag)
      .addField("ุงููููู :", EpicEdiTeD[message.author.id].Level)
      .addField("ุงูุฃูุณ ุจู :", Math.floor(EpicEdiTeD[message.author.id].Xp));
    message.channel.send(edited);
  }
  if (!EpicEdiTeD[message.author.id]) {
    EpicEdiTeD[message.author.id] = { Money: 0, Xp: 0, Level: 0, Like: 0 };
  }

  EpicEdiTeD[message.author.id].Xp += 0.25;
  EpicEdiTeD[message.author.id].Money += 0.25;
});

client.on("message", async message => {
  let args = message.content.split(" ").slice(1);
  if (message.content.startsWith(prefix + "fastrandom")) {
    if (!message.channel.guild)
      return message.channel
        .send("**ูุฐุง ุงูุฃูุฑ ููุท ููุณูุฑูุฑุงุช**")
        .then(m => m.delete(5000));
    if (message.author.id !== message.guild.owner.id) {
      message.channel.send("**ูุงุฏุง ุงูุงูุฑ ูุตุงุญุจ ุงูุณูุฑูุฑ ููุท**");
      return;
    }
    const array = [];
    message.guild.members.forEach(member => {
      array.push(member.user.tag);
    });
    const rand = array[Math.floor(Math.random() * array.length)];
    message.channel.send(rand).then(m => {
      m.split("#");
      m.edit(array);
    });
  }
});
client.on("message", async message => {
  if (message.content.startsWith("topinvite")) {
    if (message.author.bot) return;
    if (!message.channel.guild)
      return message.reply(" Error : ` Guild Command `");
    var invites = await message.guild.fetchInvites();
    invites = invites.array();
    arraySort = (invites, "uses", { reverse: true });
    let possibleInvites = ["User Invited |  Uses "];
    invites.forEach(i => {
      if (i.uses === 0) {
        return;
      }
      possibleInvites.push([
        "\n " + "<@" + i.inviter.id + ">" + "  :  " + i.uses
      ]);
      if (i.uses === 30) {
        //ููุฏูู ุชุนุฏู ุฑูู ูุตูู ุงูุนุฏุฏ ุญู ุงูุงููุงูุช ุงูู ุงุฃูู ุฃู ุฃูุซุฑ
        message.member
          .addRole(message.member.guild.roles.find("name", "??Special?โโ?  ?")) //ููุข ุฃุณู ุฃูุฑุชุจู ุงููู ุชุฌููู
          .catch(RebeL => {
            console.log("`Error`: " + RebeL);
          });
      }
      if (i.uses === 30) {
        message.member
          .addRole(message.member.guild.roles.find("name", "??Special?โโ?  ?"))
          .catch(RebeL => {
            console.log("`Error`: " + RebeL);
          });
      }
      if (i.uses === 30) {
        message.member
          .addRole(message.member.guild.roles.find("name", "??Special?โโ?  ?"))
          .catch(RebeL => {
            console.log("`Error`: " + RebeL);
          });
      } //ูุนูููู ุจุณูุทู ููุฏูู ุชูุฑุฑ ุงูุนููููู ุฃูุซุฑ ูู ูุฑู
    });
    const embed = new Discord.RichEmbed()
      .setColor("#36393e")
      .addField("Top Invites.", `${possibleInvites}`);

    message.channel.send(embed);
  }
});

let anti = JSON.parse(fs.readFileSync("./antigreff.json", "UTF8"));
let config = JSON.parse(fs.readFileSync("./config.json", "UTF8"));
client.on("message", message => {
  if (!message.channel.guild) return;
  let user = anti[message.guild.id + message.author.id];
  let num = message.content
    .split(" ")
    .slice(2)
    .join(" ");
  if (!anti[message.guild.id + message.author.id])
    anti[message.guild.id + message.author.id] = {
      actions: 0
    };
  if (!config[message.guild.id])
    config[message.guild.id] = {
      banLimit: 3,
      chaDelLimit: 3,
      roleDelLimit: 3,
      kickLimits: 3,
      roleCrLimits: 3,
      time: 30
    };
  if (message.content.startsWith(prefix + "settings limits")) {
    if (!message.member.hasPermission("MANAGE_GUILD")) return;
    if (message.content.startsWith(prefix + "settings limitsban")) {
      if (!num) return message.channel.send("**โ | ุฃุฑุณู ุฑูู ! **");
      if (isNaN(num)) return message.channel.send("**โ | ุฃุฑูุงู ููุท ! **");
      config[message.guild.id].banLimit = num;
      message.channel.send(
        `**โ | ุชู ุงูุชุบููุฑ ุงููู : ${config[message.guild.id].banLimit} **`
      );
    }
    if (message.content.startsWith(prefix + "settings limitskick")) {
      if (!num) return message.channel.send("**โ | ุฃุฑุณู ุฑูู ! **");
      if (isNaN(num)) return message.channel.send("**โ | ุฃุฑูุงู ููุท ! **");
      config[message.guild.id].kickLimits = num;
      message.channel.send(
        `**โ | ุชู ุงูุชุบููุฑ ุงููู : ${config[message.guild.id].kickLimits}**`
      );
    }
    if (message.content.startsWith(prefix + "settings limitsroleD")) {
      if (!num) return message.channel.send("**โ | ุฃุฑุณู ุฑูู ! **");
      if (isNaN(num)) return message.channel.send("**โ | ุฃุฑูุงู ููุท ! **");
      config[message.guild.id].roleDelLimit = num;
      message.channel.send(
        `**โ | ุชู ุงูุชุบููุฑ ุงููู : ${config[message.guild.id].roleDelLimit}**`
      );
    }
    if (message.content.startsWith(prefix + "settings limitsroleC")) {
      if (!num) return message.channel.send("**โ | ุฃุฑุณู ุฑูู ! **");
      if (isNaN(num)) return message.channel.send("**โ | ุฃุฑูุงู ููุท ! **");
      config[message.guild.id].roleCrLimits = num;
      message.channel.send(
        `**โ | ุชู ุงูุชุบููุฑ ุงููู : ${config[message.guild.id].roleCrLimits}**`
      );
    }
    if (message.content.startsWith(prefix + "settings limitschannelD")) {
      if (!num) return message.channel.send("**โ | ุฃุฑุณู ุฑูู ! **");
      if (isNaN(num)) return message.channel.send("**โ | ุฃุฑูุงู ููุท ! **");
      config[message.guild.id].chaDelLimit = num;
      message.channel.send(
        `**โ | ุชู ุงูุชุบููุฑ ุงููู : ${config[message.guild.id].chaDelLimit}**`
      );
    }
    if (message.content.startsWith(prefix + "settings limitstime")) {
      if (!num) return message.channel.send("**โ | ุฃุฑุณู ุฑูู ! **");
      if (isNaN(num)) return message.channel.send("**โ | ุฃุฑูุงู ููุท ! **");
      config[message.guild.id].time = num;
      message.channel.send(
        `**โ | ุชู ุงูุชุบููุฑ ุงููู : ${config[message.guild.id].time}**`
      );
    }
    fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
      if (e) throw e;
    });
    fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
      e
    ) {
      if (e) throw e;
    });
  }
});
client.on("channelDelete", async channel => {
  const entry1 = await channel.guild
    .fetchAuditLogs({
      type: "CHANNEL_DELETE"
    })
    .then(audit => audit.entries.first());
  console.log(entry1.executor.username);
  const entry = entry1.executor;
  if (!config[channel.guild.id])
    config[channel.guild.id] = {
      banLimit: 3,
      chaDelLimit: 3,
      roleDelLimit: 3,
      kickLimits: 3,
      roleCrLimits: 3
    };
  if (!anti[channel.guild.id + entry.id]) {
    anti[channel.guild.id + entry.id] = {
      actions: 1
    };
    setTimeout(() => {
      anti[channel.guild.id + entry.id].actions = "0";
    }, config[channel.guild.id].time * 1000);
  } else {
    anti[channel.guild.id + entry.id].actions = Math.floor(
      anti[channel.guild.id + entry.id].actions + 1
    );
    console.log("TETS");
    setTimeout(() => {
      anti[channel.guild.id + entry.id].actions = "0";
    }, config[channel.guild.id].time * 1000);
    if (
      anti[channel.guild.id + entry.id].actions >=
      config[channel.guild.id].chaDelLimit
    ) {
      channel.guild.members
        .get(entry.id)
        .ban()
        .catch(e =>
          channel.guild.owner.send(
            `**โ | ${entry.username} ูุงู ุจูุณุญ ุงููุซูุฑ ูู ุงูุฑููุงุช **`
          )
        );
      anti[channel.guild.id + entry.id].actions = "0";
      fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
      fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
    }
  }

  fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
    if (e) throw e;
  });
  fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(e) {
    if (e) throw e;
  });
});

client.on("roleDelete", async channel => {
  const entry1 = await channel.guild
    .fetchAuditLogs({
      type: "ROLE_DELETE"
    })
    .then(audit => audit.entries.first());
  console.log(entry1.executor.username);
  const entry = entry1.executor;
  if (!config[channel.guild.id])
    config[channel.guild.id] = {
      banLimit: 3,
      chaDelLimit: 3,
      roleDelLimit: 3,
      kickLimits: 3,
      roleCrLimits: 3
    };
  if (!anti[channel.guild.id + entry.id]) {
    anti[channel.guild.id + entry.id] = {
      actions: 1
    };
    setTimeout(() => {
      anti[channel.guild.id + entry.id].actions = "0";
    }, config[channel.guild.id].time * 1000);
  } else {
    anti[channel.guild.id + entry.id].actions = Math.floor(
      anti[channel.guild.id + entry.id].actions + 1
    );
    console.log("TETS");
    setTimeout(() => {
      anti[channel.guild.id + entry.id].actions = "0";
    }, config[channel.guild.id].time * 1000);
    if (
      anti[channel.guild.id + entry.id].actions >=
      config[channel.guild.id].roleDelLimit
    ) {
      channel.guild.members
        .get(entry.id)
        .ban()
        .catch(e =>
          channel.guild.owner.send(
            `**โ | ${entry.username} ูุงู ุจูุณุญ ุงููุซูุฑ ูู ุงูุฑุชุจ **`
          )
        );
      anti[channel.guild.id + entry.id].actions = "0";
      fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
      fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
    }
  }

  fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
    if (e) throw e;
  });
  fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(e) {
    if (e) throw e;
  });
});

client.on("roleCreate", async channel => {
  const entry1 = await channel.guild
    .fetchAuditLogs({
      type: "ROLE_CREATE"
    })
    .then(audit => audit.entries.first());
  console.log(entry1.executor.username);
  const entry = entry1.executor;
  if (!config[channel.guild.id])
    config[channel.guild.id] = {
      banLimit: 3,
      chaDelLimit: 3,
      roleDelLimit: 3,
      kickLimits: 3,
      roleCrLimits: 3
    };
  if (!anti[channel.guild.id + entry.id]) {
    anti[channel.guild.id + entry.id] = {
      actions: 1
    };
    setTimeout(() => {
      anti[channel.guild.id + entry.id].actions = "0";
    }, config[channel.guild.id].time * 1000);
  } else {
    anti[channel.guild.id + entry.id].actions = Math.floor(
      anti[channel.guild.id + entry.id].actions + 1
    );
    console.log("TETS");
    setTimeout(() => {
      anti[channel.guild.id + entry.id].actions = "0";
    }, config[channel.guild.id].time * 1000);
    if (
      anti[channel.guild.id + entry.id].actions >=
      config[channel.guild.id].roleCrLimits
    ) {
      channel.guild.members
        .get(entry.id)
        .ban()
        .catch(e =>
          channel.guild.owner.send(
            `**โ | ${entry.username} ูุงู ุจุฃูุดุงุก ุงููุซูุฑ ูู ุงูุฑุชุจ **`
          )
        );
      anti[channel.guild.id + entry.id].actions = "0";
      fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
      fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
    }
  }

  fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
    if (e) throw e;
  });
  fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(e) {
    if (e) throw e;
  });
});
client.on("guildBanAdd", async (guild, user) => {
  const entry1 = await channel.guild
    .fetchAuditLogs({
      type: "MEMBER_BAN_ADD"
    })
    .then(audit => audit.entries.first());
  console.log(entry1.executor.username);
  const entry = entry1.executor;
  if (!config[guild.id])
    config[guild.id] = {
      banLimit: 3,
      chaDelLimit: 3,
      roleDelLimit: 3,
      kickLimits: 3,
      roleCrLimits: 3
    };
  if (!anti[guild.id + entry.id]) {
    anti[guild.id + entry.id] = {
      actions: 1
    };
    setTimeout(() => {
      anti[guild.id + entry.id].actions = "0";
    }, config[guild.id].time * 1000);
  } else {
    anti[guild.id + entry.id].actions = Math.floor(
      anti[guild.id + entry.id].actions + 1
    );
    console.log("TETS");
    setTimeout(() => {
      anti[guild.id + entry.id].actions = "0";
    }, config[guild.id].time * 1000);
    if (anti[guild.id + entry.id].actions >= config[guild.id].banLimit) {
      channel.members
        .get(entry.id)
        .ban()
        .catch(e =>
          channel.owner.send(`**โ | ${entry.username} ุญุงูู ุญุธุฑ ุฌููุน ุงูุฃุนุถุงุก **`)
        );
      anti[guild.id + entry.id].actions = "0";
      fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
      fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
    }
  }

  fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
    if (e) throw e;
  });
  fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(e) {
    if (e) throw e;
  });
});

client.on("guildKickAdd", async (guild, user) => {
  const entry1 = await channel
    .fetchAuditLogs({
      type: "MEMBER_KICK"
    })
    .then(audit => audit.entries.first());
  console.log(entry1.executor.username);
  const entry = entry1.executor;
  if (!config[guild.id])
    config[guild.id] = {
      banLimit: 3,
      chaDelLimit: 3,
      roleDelLimit: 3,
      kickLimits: 3,
      roleCrLimits: 3
    };
  if (!anti[guild.id + entry.id]) {
    anti[guild.id + entry.id] = {
      actions: 1
    };
    setTimeout(() => {
      anti[guild.id + entry.id].actions = "0";
    }, config[guild.id].time * 1000);
  } else {
    anti[guild.id + entry.id].actions = Math.floor(
      anti[guild.id + entry.id].actions + 1
    );
    console.log("TETS");
    setTimeout(() => {
      anti[guild.id + entry.id].actions = "0";
    }, config[guild.id].time * 1000);
    if (anti[guild.id + entry.id].actions >= config[guild.id].banLimit) {
      channel.members
        .get(entry.id)
        .ban()
        .catch(e =>
          channel.owner.send(`**โ | ${entry.username} ุญุงูู ุญุธุฑ ุฌููุน ุงูุฃุนุถุงุก **`)
        );
      anti[guild.id + entry.id].actions = "0";
      fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
      fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
        e
      ) {
        if (e) throw e;
      });
    }
  }

  fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
    if (e) throw e;
  });
  fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(e) {
    if (e) throw e;
  });
});
client.on("guildMemberRemove", async member => {
  const entry1 = await member.guild
    .fetchAuditLogs()
    .then(audit => audit.entries.first());
  if (entry1.action === "MEMBER_KICK") {
    const entry2 = await member.guild
      .fetchAuditLogs({
        type: "MEMBER_KICK"
      })
      .then(audit => audit.entries.first());
    const entry = entry2.executor;
    if (!config[member.guild.id])
      config[guild.id] = {
        banLimit: 3,
        chaDelLimit: 3,
        roleDelLimit: 3,
        kickLimits: 3,
        roleCrLimits: 3
      };
    if (!anti[member.guild.id + entry.id]) {
      anti[member.guild.id + entry.id] = {
        actions: 1
      };
      setTimeout(() => {
        anti[member.guild.id + entry.id].actions = "0";
      }, config[member.guild.id].time * 1000);
    } else {
      anti[member.guild.id + entry.id].actions = Math.floor(
        anti[member.guild.id + entry.id].actions + 1
      );
      console.log("TETS");
      setTimeout(() => {
        anti[member.guild.id + entry.id].actions = "0";
      }, config[member.guild.id].time * 1000);
      if (
        anti[member.guild.id + entry.id].actions >=
        config[member.guild.id].kickLimits
      ) {
        member.members
          .get(entry.id)
          .ban()
          .catch(e =>
            member.owner.send(
              `**โ | ${entry.username} ุญุงูู ุญุธุฑ ุฌููุน ุงูุฃุนุถุงุก **`
            )
          );
        anti[member.guild.id + entry.id].actions = "0";
        fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(
          e
        ) {
          if (e) throw e;
        });
        fs.writeFile(
          "./antigreff.json",
          JSON.stringify(anti, null, 2),
          function(e) {
            if (e) throw e;
          }
        );
      }
    }
    fs.writeFile("./config.json", JSON.stringify(config, null, 2), function(e) {
      if (e) throw e;
    });
    fs.writeFile("./antigreff.json", JSON.stringify(anti, null, 2), function(
      e
    ) {
      if (e) throw e;
    });
  }
});
const log = JSON.parse(fs.readFileSync("./log.json", "utf8"));
client.on("message", message => {
  if (!message.channel.guild) return;
  let room = message.content.split(" ").slice(1);
  let findroom = message.guild.channels.find("name", `${room}`);
  if (message.content.startsWith(prefix + "setLog")) {
    if (!message.channel.guild)
      return message.reply("**This Command Only For Servers**");
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    if (!room) return message.channel.send("Please Type The Channel Name");
    if (!findroom)
      return message.channel.send("Please Type The Log Channel Name");
    let embed = new Discord.RichEmbed()
      .setTitle("**Done The Log Code Has Been Setup**")
      .addField("Channel:", `${room}`)
      .addField("Requested By:", `${message.author}`)
      .setThumbnail(message.author.avatarURL)
      .setFooter(`${client.user.username}`);
    message.channel.sendEmbed(embed);
    log[message.guild.id] = {
      channel: room,
      onoff: "On"
    };
    fs.writeFile("./log.json", JSON.stringify(log), err => {
      if (err) console.error(err);
    });
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "toggleLog")) {
    if (!message.channel.guild)
      return message.reply("**This Command Only For Servers**");
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    if (!log[message.guild.id])
      log[message.guild.id] = {
        onoff: "Off"
      };
    if (log[message.guild.id].onoff === "Off")
      return [
        message.channel.send(`**The log Is __๐๐__ !**`),
        (log[message.guild.id].onoff = "On")
      ];
    if (log[message.guild.id].onoff === "On")
      return [
        message.channel.send(`**The log Is __๐๐๐__ !**`),
        (log[message.guild.id].onoff = "Off")
      ];
    fs.writeFile("./log.json", JSON.stringify(log), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});
client.on("messageDelete", message => {
  if (message.author.bot) return;
  if (message.channel.type === "dm") return;
  if (!message.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!message.guild.member(client.user).hasPermission("MANAGE_MESSAGES"))
    return;
  if (!log[message.guild.id])
    log[message.guild.id] = {
      onoff: "Off"
    };
  if (log[message.guild.id].onoff === "Off") return;
  var logChannel = message.guild.channels.find(
    c => c.name === `${log[message.guild.id].channel}`
  );
  if (!logChannel) return;

  let messageDelete = new Discord.RichEmbed()
    .setTitle("**[MESSAGE DELETE]**")
    .setColor("RED")
    .setThumbnail(message.author.avatarURL)
    .setDescription(
      `**\n**:wastebasket: Successfully \`\`DELETE\`\` **MESSAGE** In ${message.channel}\n\n**Channel:** \`\`${message.channel.name}\`\` (ID: ${message.channel.id})\n**Message ID:** ${message.id}\n**Sent By:** <@${message.author.id}> (ID: ${message.author.id})\n**Message:**\n\`\`\`${message}\`\`\``
    )
    .setTimestamp()
    .setFooter(message.guild.name, message.guild.iconURL);

  logChannel.send(messageDelete);
});
client.on("messageUpdate", (oldMessage, newMessage) => {
  if (oldMessage.author.bot) return;
  if (!oldMessage.channel.type === "dm") return;
  if (!oldMessage.guild.member(client.user).hasPermission("EMBED_LINKS"))
    return;
  if (!oldMessage.guild.member(client.user).hasPermission("MANAGE_MESSAGES"))
    return;
  if (!log[oldMessage.guild.id])
    log[oldMessage.guild.id] = {
      onoff: "Off"
    };
  if (log[oldMessage.guild.id].onoff === "Off") return;
  var logChannel = oldMessage.guild.channels.find(
    c => c.name === `${log[oldMessage.guild.id].channel}`
  );
  if (!logChannel) return;
  if (oldMessage.content.startsWith("https://")) return;
  let messageUpdate = new Discord.RichEmbed()
    .setTitle("**[MESSAGE EDIT]**")
    .setThumbnail(oldMessage.author.avatarURL)
    .setColor("BLUE")
    .setDescription(
      `**\n**:wrench: Successfully \`\`EDIT\`\` **MESSAGE** In ${oldMessage.channel}\n\n**Channel:** \`\`${oldMessage.channel.name}\`\` (ID: ${oldMessage.channel.id})\n**Message ID:** ${oldMessage.id}\n**Sent By:** <@${oldMessage.author.id}> (ID: ${oldMessage.author.id})\n\n**Old Message:**\`\`\`${oldMessage}\`\`\`\n**New Message:**\`\`\`${newMessage}\`\`\``
    )
    .setTimestamp()
    .setFooter(oldMessage.guild.name, oldMessage.guild.iconURL);

  logChannel.send(messageUpdate);
});
client.on("roleCreate", role => {
  if (!role.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!role.guild.member(client.user).hasPermission("VIEW_AUDIT_LOG")) return;
  if (!log[role.guild.id])
    log[role.guild.id] = {
      onoff: "Off"
    };
  if (log[role.guild.id].onoff === "Off") return;
  var logChannel = role.guild.channels.find(
    c => c.name === `${log[role.guild.id].channel}`
  );
  if (!logChannel) return;

  role.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    let roleCreate = new Discord.RichEmbed()
      .setTitle("**[ROLE CREATE]**")
      .setThumbnail(userAvatar)
      .setDescription(
        `**\n**:white_check_mark: Successfully \`\`CREATE\`\` Role.\n\n**Role Name:** \`\`${role.name}\`\` (ID: ${role.id})\n**By:** <@${userID}> (ID: ${userID})`
      )
      .setColor("GREEN")
      .setTimestamp()
      .setFooter(role.guild.name, role.guild.iconURL);

    logChannel.send(roleCreate);
  });
});
client.on("roleDelete", role => {
  if (!role.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!role.guild.member(client.user).hasPermission("VIEW_AUDIT_LOG")) return;
  if (!log[role.guild.id])
    log[role.guild.id] = {
      onoff: "Off"
    };
  if (log[role.guild.id].onoff === "Off") return;
  var logChannel = role.guild.channels.find(
    c => c.name === `${log[role.guild.id].channel}`
  );
  if (!logChannel) return;

  role.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    let roleDelete = new Discord.RichEmbed()
      .setTitle("**[ROLE DELETE]**")
      .setThumbnail(userAvatar)
      .setDescription(
        `**\n**:white_check_mark: Successfully \`\`DELETE\`\` Role.\n\n**Role Name:** \`\`${role.name}\`\` (ID: ${role.id})\n**By:** <@${userID}> (ID: ${userID})`
      )
      .setColor("RED")
      .setTimestamp()
      .setFooter(role.guild.name, role.guild.iconURL);

    logChannel.send(roleDelete);
  });
});
client.on("roleUpdate", (oldRole, newRole) => {
  if (!oldRole.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!oldRole.guild.member(client.user).hasPermission("VIEW_AUDIT_LOG"))
    return;
  if (!log[oldRole.guild.id])
    log[oldRole.guild.id] = {
      onoff: "Off"
    };
  if (log[oldRole.guild.id].onoff === "Off") return;
  var logChannel = oldRole.guild.channels.find(
    c => c.name === `${log[oldRole.guild.id].channel}`
  );
  if (!logChannel) return;

  oldRole.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    if (oldRole.name !== newRole.name) {
      if (log[oldRole.guild.id].onoff === "Off") return;
      let roleUpdateName = new Discord.RichEmbed()
        .setTitle("**[ROLE NAME UPDATE]**")
        .setThumbnail(userAvatar)
        .setColor("BLUE")
        .setDescription(
          `**\n**:white_check_mark: Successfully \`\`EDITED\`\` Role Name.\n\n**Old Name:** \`\`${oldRole.name}\`\`\n**New Name:** \`\`${newRole.name}\`\`\n**Role ID:** ${oldRole.id}\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(oldRole.guild.name, oldRole.guild.iconURL);

      logChannel.send(roleUpdateName);
    }
    if (oldRole.hexColor !== newRole.hexColor) {
      if (oldRole.hexColor === "#000000") {
        var oldColor = "`Default`";
      } else {
        var oldColor = oldRole.hexColor;
      }
      if (newRole.hexColor === "#000000") {
        var newColor = "`Default`";
      } else {
        var newColor = newRole.hexColor;
      }
      if (log[oldRole.guild.id].onoff === "Off") return;
      let roleUpdateColor = new Discord.RichEmbed()
        .setTitle("**[ROLE COLOR UPDATE]**")
        .setThumbnail(userAvatar)
        .setColor("BLUE")
        .setDescription(
          `**\n**:white_check_mark: Successfully \`\`EDITED\`\` **${oldRole.name}** Role Color.\n\n**Old Color:** ${oldColor}\n**New Color:** ${newColor}\n**Role ID:** ${oldRole.id}\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(oldRole.guild.name, oldRole.guild.iconURL);

      logChannel.send(roleUpdateColor);
    }
  });
});
client.on("channelCreate", channel => {
  if (!channel.guild) return;
  if (!channel.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!channel.guild.member(client.user).hasPermission("VIEW_AUDIT_LOG"))
    return;
  if (!log[channel.guild.id])
    log[channel.guild.id] = {
      onoff: "Off"
    };
  if (log[channel.guild.id].onoff === "Off") return;
  var logChannel = channel.guild.channels.find(
    c => c.name === `${log[channel.guild.id].channel}`
  );
  if (!logChannel) return;

  if (channel.type === "text") {
    var roomType = "Text";
  } else if (channel.type === "voice") {
    var roomType = "Voice";
  } else if (channel.type === "category") {
    var roomType = "Category";
  }
  channel.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    let channelCreate = new Discord.RichEmbed()
      .setTitle("**[CHANNEL CREATE]**")
      .setThumbnail(userAvatar)
      .setDescription(
        `**\n**:white_check_mark: Successfully \`\`CREATE\`\` **${roomType}** channel.\n\n**Channel Name:** \`\`${channel.name}\`\` (ID: ${channel.id})\n**By:** <@${userID}> (ID: ${userID})`
      )
      .setColor("GREEN")
      .setTimestamp()
      .setFooter(channel.guild.name, channel.guild.iconURL);

    logChannel.send(channelCreate);
  });
});
client.on("channelDelete", channel => {
  if (!channel.guild) return;
  if (!channel.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!channel.guild.member(client.user).hasPermission("VIEW_AUDIT_LOG"))
    return;
  if (!log[channel.guild.id])
    log[channel.guild.id] = {
      onoff: "Off"
    };
  if (log[channel.guild.id].onoff === "Off") return;
  var logChannel = channel.guild.channels.find(
    c => c.name === `${log[channel.guild.id].channel}`
  );
  if (!logChannel) return;

  if (channel.type === "text") {
    var roomType = "Text";
  } else if (channel.type === "voice") {
    var roomType = "Voice";
  } else if (channel.type === "category") {
    var roomType = "Category";
  }
  channel.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    let channelDelete = new Discord.RichEmbed()
      .setTitle("**[CHANNEL DELETE]**")
      .setThumbnail(userAvatar)
      .setDescription(
        `**\n**:white_check_mark: Successfully \`\`DELETE\`\` **${roomType}** channel.\n\n**Channel Name:** \`\`${channel.name}\`\` (ID: ${channel.id})\n**By:** <@${userID}> (ID: ${userID})`
      )
      .setColor("RED")
      .setTimestamp()
      .setFooter(channel.guild.name, channel.guild.iconURL);

    logChannel.send(channelDelete);
  });
});
client.on("channelUpdate", (oldChannel, newChannel) => {
  if (!oldChannel.guild) return;
  if (!log[oldChannel.guild.id])
    log[oldChannel.guild.id] = {
      onoff: "Off"
    };
  if (log[oldChannel.guild.id].onoff === "Off") return;
  var logChannel = oldChannel.guild.channels.find(
    c => c.name === `${log[oldChannel.guild.id].channel}`
  );
  if (!logChannel) return;

  if (oldChannel.type === "text") {
    var channelType = "Text";
  } else if (oldChannel.type === "voice") {
    var channelType = "Voice";
  } else if (oldChannel.type === "category") {
    var channelType = "Category";
  }

  oldChannel.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    if (oldChannel.name !== newChannel.name) {
      let newName = new Discord.RichEmbed()
        .setTitle("**[CHANNEL EDIT]**")
        .setThumbnail(userAvatar)
        .setColor("BLUE")
        .setDescription(
          `**\n**:wrench: Successfully Edited **${channelType}** Channel Name\n\n**Old Name:** \`\`${oldChannel.name}\`\`\n**New Name:** \`\`${newChannel.name}\`\`\n**Channel ID:** ${oldChannel.id}\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(oldChannel.guild.name, oldChannel.guild.iconURL);

      logChannel.send(newName);
    }
    if (oldChannel.topic !== newChannel.topic) {
      if (log[oldChannel.guild.id].onoff === "Off") return;
      let newTopic = new Discord.RichEmbed()
        .setTitle("**[CHANNEL EDIT]**")
        .setThumbnail(userAvatar)
        .setColor("BLUE")
        .setDescription(
          `**\n**:wrench: Successfully Edited **${channelType}** Channel Topic\n\n**Old Topic:**\n\`\`\`${oldChannel.topic ||
            "NULL"}\`\`\`\n**New Topic:**\n\`\`\`${newChannel.topic ||
            "NULL"}\`\`\`\n**Channel:** ${oldChannel} (ID: ${
            oldChannel.id
          })\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(oldChannel.guild.name, oldChannel.guild.iconURL);

      logChannel.send(newTopic);
    }
  });
});
client.on("guildBanAdd", (guild, user) => {
  if (!guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!guild.member(client.user).hasPermission("VIEW_AUDIT_LOG")) return;
  if (!log[user.guild.id])
    log[guild.guild.id] = {
      onoff: "Off"
    };
  if (log[user.guild.id].onoff === "Off") return;
  var logChannel = guild.channels.find(
    c => c.name === `${log[guild.guild.id].channel}`
  );
  if (!logChannel) return;

  guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    if (userID === client.user.id) return;

    let banInfo = new Discord.RichEmbed()
      .setTitle("**[BANNED]**")
      .setThumbnail(userAvatar)
      .setColor("DARK_RED")
      .setDescription(
        `**\n**:airplane: Successfully \`\`BANNED\`\` **${user.username}** From the server!\n\n**User:** <@${user.id}> (ID: ${user.id})\n**By:** <@${userID}> (ID: ${userID})`
      )
      .setTimestamp()
      .setFooter(guild.name, guild.iconURL);

    logChannel.send(banInfo);
  });
});
client.on("guildBanRemove", (guild, user) => {
  if (!guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!guild.member(client.user).hasPermission("VIEW_AUDIT_LOG")) return;
  if (!log[guild.guild.id])
    log[guild.guild.id] = {
      onoff: "Off"
    };
  if (log[guild.guild.id].onoff === "Off") return;
  var logChannel = guild.channels.find(
    c => c.name === `${log[guild.guild.id].channel}`
  );
  if (!logChannel) return;

  guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;

    if (userID === client.user.id) return;

    let unBanInfo = new Discord.RichEmbed()
      .setTitle("**[UNBANNED]**")
      .setThumbnail(userAvatar)
      .setColor("GREEN")
      .setDescription(
        `**\n**:unlock: Successfully \`\`UNBANNED\`\` **${user.username}** From the server\n\n**User:** <@${user.id}> (ID: ${user.id})\n**By:** <@${userID}> (ID: ${userID})`
      )
      .setTimestamp()
      .setFooter(guild.name, guild.iconURL);

    logChannel.send(unBanInfo);
  });
});
client.on("guildMemberUpdate", (oldMember, newMember) => {
  if (!oldMember.guild) return;
  if (!log[oldMember.guild.id])
    log[oldMember.guild.id] = {
      onoff: "Off"
    };
  if (log[oldMember.guild.id].onoff === "Off") return;
  var logChannel = oldMember.guild.channels.find(
    c => c.name === `${log[(oldMember, newMember.guild.id)].channel}`
  );
  if (!logChannel) return;

  oldMember.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userAvatar = logs.entries.first().executor.avatarURL;
    var userTag = logs.entries.first().executor.tag;

    if (oldMember.nickname !== newMember.nickname) {
      if (oldMember.nickname === null) {
        var oldNM = "`ุงุณูู ุงูุงุตูู`";
      } else {
        var oldNM = oldMember.nickname;
      }
      if (newMember.nickname === null) {
        var newNM = "`ุงุณูู ุงูุงุตูู`";
      } else {
        var newNM = newMember.nickname;
      }

      let updateNickname = new Discord.RichEmbed()
        .setTitle("**[UPDATE MEMBER NICKNAME]**")
        .setThumbnail(userAvatar)
        .setColor("BLUE")
        .setDescription(
          `**\n**:spy: Successfully \`\`CHANGE\`\` Member Nickname.\n\n**User:** ${oldMember} (ID: ${oldMember.id})\n**Old Nickname:** ${oldNM}\n**New Nickname:** ${newNM}\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(oldMember.guild.name, oldMember.guild.iconURL);

      logChannel.send(updateNickname);
    }
    if (oldMember.roles.size < newMember.roles.size) {
      let role = newMember.roles
        .filter(r => !oldMember.roles.has(r.id))
        .first();
      if (!log[oldMember.guild.id])
        log[oldMember.guild.id] = {
          onoff: "Off"
        };
      if (log[oldMember.guild.id].onoff === "Off") return;
      let roleAdded = new Discord.RichEmbed()
        .setTitle("**[ADDED ROLE TO MEMBER]**")
        .setThumbnail(oldMember.guild.iconURL)
        .setColor("GREEN")
        .setDescription(
          `**\n**:white_check_mark: Successfully \`\`ADDED\`\` Role to **${oldMember.user.username}**\n\n**User:** <@${oldMember.id}> (ID: ${oldMember.user.id})\n**Role:** \`\`${role.name}\`\` (ID: ${role.id})\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(userTag, userAvatar);

      logChannel.send(roleAdded);
    }
    if (oldMember.roles.size > newMember.roles.size) {
      let role = oldMember.roles
        .filter(r => !newMember.roles.has(r.id))
        .first();
      if (!log[oldMember.guild.id])
        log[oldMember.guild.id] = {
          onoff: "Off"
        };
      if (log[(oldMember, newMember.guild.id)].onoff === "Off") return;
      let roleRemoved = new Discord.RichEmbed()
        .setTitle("**[REMOVED ROLE FROM MEMBER]**")
        .setThumbnail(oldMember.guild.iconURL)
        .setColor("RED")
        .setDescription(
          `**\n**:negative_squared_cross_mark: Successfully \`\`REMOVED\`\` Role from **${oldMember.user.username}**\n\n**User:** <@${oldMember.user.id}> (ID: ${oldMember.id})\n**Role:** \`\`${role.name}\`\` (ID: ${role.id})\n**By:** <@${userID}> (ID: ${userID})`
        )
        .setTimestamp()
        .setFooter(userTag, userAvatar);

      logChannel.send(roleRemoved);
    }
  });
  if (oldMember.guild.owner.id !== newMember.guild.owner.id) {
    if (!log[oldMember.guild.id])
      log[oldMember.guild.id] = {
        onoff: "Off"
      };
    if (log[(oldMember, newMember.guild.id)].onoff === "Off") return;
    let newOwner = new Discord.RichEmbed()
      .setTitle("**[UPDATE GUILD OWNER]**")
      .setThumbnail(oldMember.guild.iconURL)
      .setColor("GREEN")
      .setDescription(
        `**\n**:white_check_mark: Successfully \`\`TRANSFER\`\` The Owner Ship.\n\n**Old Owner:** <@${oldMember.user.id}> (ID: ${oldMember.user.id})\n**New Owner:** <@${newMember.user.id}> (ID: ${newMember.user.id})`
      )
      .setTimestamp()
      .setFooter(oldMember.guild.name, oldMember.guild.iconURL);

    logChannel.send(newOwner);
  }
});
client.on("voiceStateUpdate", (voiceOld, voiceNew) => {
  if (!voiceOld.guild.member(client.user).hasPermission("EMBED_LINKS")) return;
  if (!voiceOld.guild.member(client.user).hasPermission("VIEW_AUDIT_LOG"))
    return;
  if (!log[voiceOld.guild.id])
    log[voiceOld.guild.id] = {
      onoff: "Off"
    };
  if (log[(voiceOld, voiceOld.guild.id)].onoff === "Off") return;
  var logChannel = voiceOld.guild.channels.find(
    c => c.name === `${log[(voiceOld, voiceNew.guild.id)].channel}`
  );
  if (!logChannel) return;

  voiceOld.guild.fetchAuditLogs().then(logs => {
    var userID = logs.entries.first().executor.id;
    var userTag = logs.entries.first().executor.tag;
    var userAvatar = logs.entries.first().executor.avatarURL;

    if (voiceOld.serverMute === false && voiceNew.serverMute === true) {
      let serverMutev = new Discord.RichEmbed()
        .setTitle("**[VOICE MUTE]**")
        .setThumbnail(
          "https://images-ext-1.discordapp.net/external/pWQaw076OHwVIFZyeFoLXvweo0T_fDz6U5C9RBlw_fQ/https/cdn.pg.sa/UosmjqDNgS.png"
        )
        .setColor("RED")
        .setDescription(
          `**User:** ${voiceOld} (ID: ${voiceOld.id})\n**By:** <@${userID}> (ID: ${userID})\n**Channel:** \`\`${voiceOld.voiceChannel.name}\`\` (ID: ${voiceOld.voiceChannel.id})`
        )
        .setTimestamp()
        .setFooter(userTag, userAvatar);
      logChannel.send(serverMutev);
    }
    if (voiceOld.serverMute === true && voiceNew.serverMute === false) {
      if (!log[voiceOld.guild.id])
        log[voiceOld.guild.id] = {
          onoff: "Off"
        };
      if (log[(voiceOld, voiceOld.guild.id)].onoff === "Off") return;
      let serverUnmutev = new Discord.RichEmbed()
        .setTitle("**[VOICE UNMUTE]**")
        .setThumbnail(
          "https://images-ext-1.discordapp.net/external/u2JNOTOc1IVJGEb1uCKRdQHXIj5-r8aHa3tSap6SjqM/https/cdn.pg.sa/Iy4t8H4T7n.png"
        )
        .setColor("GREEN")
        .setDescription(
          `**User:** ${voiceOld} (ID: ${voiceOld.id})\n**By:** <@${userID}> (ID: ${userID})\n**Channel:** \`\`${voiceOld.voiceChannel.name}\`\` (ID: ${voiceOld.voiceChannel.id})`
        )
        .setTimestamp()
        .setFooter(userTag, userAvatar);

      logChannel.send(serverUnmutev);
    }
    if (voiceOld.serverDeaf === false && voiceNew.serverDeaf === true) {
      if (!log[voiceOld.guild.id])
        log[voiceOld.guild.id] = {
          onoff: "Off"
        };
      if (log[(voiceOld, voiceOld.guild.id)].onoff === "Off") return;
      let serverDeafv = new Discord.RichEmbed()
        .setTitle("**[VOICE DEAF]**")
        .setThumbnail(
          "https://images-ext-1.discordapp.net/external/7ENt2ldbD-3L3wRoDBhKHb9FfImkjFxYR6DbLYRjhjA/https/cdn.pg.sa/auWd5b95AV.png"
        )
        .setColor("RED")
        .setDescription(
          `**User:** ${voiceOld} (ID: ${voiceOld.id})\n**By:** <@${userID}> (ID: ${userID})\n**Channel:** \`\`${voiceOld.voiceChannel.name}\`\` (ID: ${voiceOld.voiceChannel.id})`
        )
        .setTimestamp()
        .setFooter(userTag, userAvatar);

      logChannel.send(serverDeafv);
    }
    if (voiceOld.serverDeaf === true && voiceNew.serverDeaf === false) {
      if (!log[voiceOld.guild.id])
        log[voiceOld.guild.id] = {
          onoff: "Off"
        };
      if (log[(voiceOld, voiceOld.guild.id)].onoff === "Off") return;
      let serverUndeafv = new Discord.RichEmbed()
        .setTitle("**[VOICE UNDEAF]**")
        .setThumbnail(
          "https://images-ext-2.discordapp.net/external/s_abcfAlNdxl3uYVXnA2evSKBTpU6Ou3oimkejx3fiQ/https/cdn.pg.sa/i7fC8qnbRF.png"
        )
        .setColor("GREEN")
        .setDescription(
          `**User:** ${voiceOld} (ID: ${voiceOld.id})\n**By:** <@${userID}> (ID: ${userID})\n**Channel:** \`\`${voiceOld.voiceChannel.name}\`\` (ID: ${voiceOld.voiceChannel.id})`
        )
        .setTimestamp()
        .setFooter(userTag, userAvatar);

      logChannel.send(serverUndeafv);
    }
  });
  if (
    voiceOld.voiceChannelID !== voiceNew.voiceChannelID &&
    voiceNew.voiceChannel &&
    voiceOld.voiceChannel != null
  ) {
    if (!log[voiceOld.guild.id])
      log[voiceOld.guild.id] = {
        onoff: "Off"
      };
    if (log[(voiceOld, voiceOld.guild.id)].onoff === "Off") return;
    let voiceLeave = new Discord.RichEmbed()
      .setTitle("**[CHANGED VOICE ROOM]**")
      .setColor("GREEN")
      .setThumbnail(voiceOld.user.avatarURL)
      .setDescription(
        `**\n**:repeat: Successfully \`\`CHANGED\`\` The Voice Channel.\n\n**From:** \`\`${voiceOld.voiceChannel.name}\`\` (ID: ${voiceOld.voiceChannelID})\n**To:** \`\`${voiceNew.voiceChannel.name}\`\` (ID: ${voiceNew.voiceChannelID})\n**User:** ${voiceOld} (ID: ${voiceOld.id})`
      )
      .setTimestamp()
      .setFooter(voiceOld.user.tag, voiceOld.user.avatarURL);

    logChannel.send(voiceLeave);
  }
});
var KinG66S = {};
client.on("guildMemberRemove", member => {
  KinG66S[member.id] = { roles: member.roles.array() };
});
client.on("guildMemberAdd", member => {
  if (!KinG66S[member.user.id]) return;
  console.log(KinG66S[member.user.id].roles.length);
  for (let i = 0; i < KinG66S[member.user.id].roles.length + 1; i++) {
    member.addRole(KinG66S[member.user.id].roles.shift());
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "user")) {
    moment.locale("ar-ly");
    var args = message.content.split(" ").slice(1);
    let user = message.mentions.users.first();
    var men = message.mentions.users.first();
    var heg;
    if (men) {
      heg = men;
    } else {
      heg = message.author;
    }
    var mentionned = message.mentions.members.first();
    var h;
    if (mentionned) {
      h = mentionned;
    } else {
      h = message.member;
    }
    if (args == "") {
      var z = message.author;
    } else {
      var z = message.mentions.users.first();
    }
    let oi = message.mentions.users.first()
      ? message.mentions.users.first().id
      : message.author.id;
    let img = message.mentions.users.first()
      ? message.mentions.users.first().username
      : message.author.username;
    let imagemm = message.mentions.users.first()
      ? message.mentions.users.first().avatarURL
      : message.author.avatarURL;
    message.guild.fetchInvites().then(invs => {
      let member = client.guilds.get(message.guild.id).members.get(oi);
      let personalInvites = invs.filter(i => i.inviter.id === oi);
      let urll = invs.filter(i => i.inviter.id === oi);
      let link = urll.reduce(
        (p, v) =>
          v.url + ` , Total de membros recrutados no convite: ${v.uses}.\n` + p,
        `\nServidor: ${message.guild.name} \n `
      );
      let inviteCount = personalInvites.reduce((p, v) => v.uses + p, 0);
      let exec = personalInvites.reduce((p, v) => v.inviter);
      let possibleInvites = [["Total de membros recrutados:"]];
      possibleInvites.push([inviteCount, exec]);
      let user = message.mentions.users.first() || message.author;
      let mem = message.guild.member(user);
      let millisJoined = new Date().getTime() - mem.joinedAt.getTime();
      let daysJoined = millisJoined / 1000 / 60 / 60 / 24;
      let heroo = new Discord.RichEmbed()
        .setColor("RANDOM")
        .addField(
          ":ุฏุฎููู ูุฏูุณููุฑุฏ",
          `${moment(heg.createdTimestamp).format(
            "YYYY/M/D HH:mm:ss"
          )} **\n** \`${moment(heg.createdTimestamp).fromNow()}\``,
          true
        )
        .addField(
          ":ุงูุถูุงูู ูุณูุฑููุง",
          `${moment(h.joinedAt).format("YYYY/M/D HH:mm:ss")} \n \`${moment(
            h.joinedAt
          ).fromNow()}\``,
          true
        )
        .setTitle(`__${z.username}__ **Info**`)
        .addField("ุนุฏุฏ ุงูุฏุนูุงุช", `**${Number(inviteCount)}**`, true)
        .setThumbnail(imagemm)
        .setFooter(message.author.username, message.author.avatarURL);

      message.channel.send({ embed: heroo });
    });
  }
});
client.on("message", async message => {
  if (message.content.includes("discord.gg")) {
    if (message.member.hasPermission("MANAGE_GUILD")) return;
    if (!message.channel.guild) return;
    message.delete();
    var command = message.content.split(" ")[0];
    let muterole = message.guild.roles.find(`name`, "muted");
    if (!muterole) {
      try {
        muterole = await message.guild.createRole({
          name: "muted",
          color: "#000000",
          permissions: []
        });
        message.guild.channels.forEach(async (channel, id) => {
          await channel.overwritePermissions(muterole, {
            SEND_MESSAGES: false,
            ADD_REACTIONS: false
          });
        });
      } catch (e) {
        console.log(e.stack);
      }
    }
    if (!message.channel.guild)
      return message.reply("** This command only for servers**");
    message.member.addRole(muterole);
    const embed500 = new Discord.RichEmbed()
      .setTitle("Muted Ads")
      .addField(
        `**  You Have Been Muted **`,
        `**Reason : Sharing Another Discord Link**`
      )
      .setColor("c91616")
      .setThumbnail(`${message.author.avatarURL}`)
      .setAuthor(message.author.username, message.author.avatarURL)
      .setFooter(`${message.guild.name} `);
    message.channel.send(embed500);
    message.author.send(
      "` ุงูุช ูุนุงูุจ ูููุช ุดุงุชู ุจุณุจุจ ูุดุฑ ุณุฑูุฑุงุช ุงู ูุงู ุนู ุทุฑูู ุงูุฎุทุง ูู ูุถูู ุชููู ูุน ุงูุงุฏุงุฑุฉ `"
    );
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "alljoin")) {
    if (!message.member.hasPermission("MOVE_MEMBERS"))
      return message.channel.send("**ูุงููุฌุฏ ูุฏูู ุตูุงุญูุฉ ุณุญุจ ุงูุฃุนุถุงุก**");
    if (!message.guild.member(client.user).hasPermission("MOVE_MEMBERS"))
      return message.reply("**ูุงููุฌุฏ ูุฏู ุตูุงุญูุฉ ุงูุณุญุจ**");
    if (message.member.voiceChannel == null)
      return message.channel.send(`**ุงูุฑุฌุงุก ุงูุฏุฎูู ูุฑูู ุตูุชู**`);
    var author = message.member.voiceChannelID;
    var m = message.guild.members.filter(m => m.voiceChannel);
    message.guild.members
      .filter(m => m.voiceChannel)
      .forEach(m => {
        m.setVoiceChannel(author);
      });
    message.channel.send(`**ุชู ุณุญุจ ุฌููุน ุงูุฃุนุถุงุก ุงูู ุงูุฑูู ุงูุตูุชู ุญูู.**`);
  }
});
client.on("message", async message => {
  if (message.content.startsWith(prefix + "ads")) {
    await message.channel.send("`ุงุฑุณุงู ุงูุฑุณุงูู .`").then(e => {
      let filter = m => m.author.id === message.author.id;
      let tests = "";
      let time = "";
      let channel = "";
      let chaTests = message.channel
        .awaitMessages(filter, { max: 1, time: 30000, errors: ["time"] })
        .then(collected => {
          tests = collected.first().content;
          collected.first().delete();
          e.edit("`ุชูุฑุงุฑ ุงูุฑุณุงูู ูู ....... ุฏูุงุฆู`");
          let chaTime = message.channel
            .awaitMessages(filter, { max: 1, time: 30000, errors: ["time"] })
            .then(co => {
              if (isNaN(co.first().content))
                return message.reply("`ุงูููุช ุจุงูุฏูุงุฆู ! ุงุฑูุงู ููุทู`");
              if (co.first().content > 1500 || co.first().content < 1)
                return message.channel.send(
                  "`ูุง ุงูู ูู ุฏูููู ููุง ุงูุซุฑ ูู ููู`"
                );
              time = co.first().content;
              co.first().delete();
              e.edit("`ุงุฏุฎู ุงุณู ุงูุฑูู`");
              let chaChannel = message.channel
                .awaitMessages(filter, {
                  max: 1,
                  time: 30000,
                  errors: ["time"]
                })
                .then(col => {
                  channel = col.first().content;
                  col.first().delete();
                  e.edit("`ุฌุงุฑู ุงุนุฏุงุฏ ุงููุนูููุงุช ุงูุฑุฌุงุก ุงูุงูุชุธุงุงุฑ...`").then(
                    b => {
                      setTimeout(() => {
                        b.edit(`** ุชู ุงุนุฏุงุฏ ุงููุนูููุงุช ุจูุฌุงุญ .**`);
                      }, 2000);
                    }
                  );
                  var room = message.guild.channels.find("name", channel);
                  if (!room) return;
                  if (room) {
                    setInterval(() => {
                      room.send(tests);
                    }, time * 60000);
                  }
                });
            });
        });
    });
  }
});
client.on("message", message => {
  if (message.content.includes("<@348953140315291649>")) {
    message.channel.startTyping();
    setTimeout(() => {
      message.channel.stopTyping();
    }, 7000);
  }
});
client.on("message", async message => {
  if (message.content.toLowerCase() === prefix + "profile") {
    message.channel.startTyping();
    setTimeout(() => {
      message.channel.stopTyping();
    }, Math.random() * (1 - 3) + 1 * 1000).then(
      message.channel.send({
        files: [
          {
            name: "prfoilebycutie.png",
            attachment: `https://api.probot.io/profile/${message.author.id}?bg=default.png`
          }
        ]
      })
    );
  }
});
const pubg = [
  "Fortnite | ูุง ูู ุงููู ุณูุงุญ ุจุฑุงุฆูู ุ",
  "Fortnite | ูุง ูู ุงูุถู ููุทูุฉ ุชูุฒู ุจูุง ุจุฑุงูู ุ",
  "Fortnite | ูู ุนุฏุฏ ููุฒุงุชู ุ",
  "Fortnite | ูู ูู ุนุฏุฏ ุงูุซุฑ ูุชูุงุช ูู ุ ",
  "Fortnite | ูู ุนุฏุฏ ุงุตุฏูุงุฆู ุ ",
  "Fortnite | ูู ุนุฏุฏ ุณููุงุชู ุ ",
  "Fortnite | ูู ูู ุงูุถู ูุงุนุจ ุงุฌูุจู ุญุณุจ ุฑุงูู ุ ",
  "Fortnite | ูู ูู ุงูุถู ูุงุนุจ ุนุฑุจู ุญุณุจ ุฑุงูู ุ ",
  "Fortnite | ูุง ูู ุงูุถู ุทูุฑ ุญุณุจ ุฑุงูู ุ ",
  "Fortnite | ูู ุงูุช ูุญุชุฑู ุงู ููุจ ุ ",
  "Fortnite | ูุง ููุง ุงูุถู ุณูุงุญูู ูุน ุจุนุถ ุญุณุจ ุฑุงูู ุ "
];
client.on("message", message => {
  if (message.author.bot) return;
  if (message.content.startsWith("$fortnite")) {
    if (!message.channel.guild)
      return message.reply("** This command only for servers **");
    var client = new Discord.RichEmbed()
      .setTitle("ูุนุจู ุงุณุฆูู ููุฑุช ูุงูุช")
      .setColor("#FFA500")
      .setDescription(`${pubg[Math.floor(Math.random() * pubg.length)]}`)
      .setImage(
        "https://cdn.discordapp.com/attachments/497081825492074496/500662255004942346/images.jpg"
      )
      .setTimestamp();
    message.channel.sendEmbed(client);
    message.react("??");
  }
});


client.on("guildCreate", guild => {
  var embed = new Discord.RichEmbed()
    .setColor(0x5500ff)
    .setDescription(`**ุดูุฑุงู ูู ูุฅุถุงูู ุงูุจูุช ุงูู ุณูุฑูุฑู๐**`);
  guild.owner.send(embed);
});
client.on("message", async m => {
  var prefix = "$";
  if (m.author.bot || !m.guild) return;
  var args = m.content.split(" ");
  var command = args[0].slice(prefix.length);
  if (!m.content.startsWith(prefix)) return;
  var all = ["-"];
  switch (command) {
    case "drake":
      if (!args[1] && !args[2])
        return m.channel.send(
          new Discord.RichEmbed().setDescription(
            `<a:no:651123754558291988> Usage \`${prefix}drake <bad> <good>\``
          )
        );
      if (!args[2])
        return m.channel.send(
          new Discord.RichEmbed().setDescription(
            "<a:no:651123754558291988> Unable to resolve the ``good`` argument."
          )
        );
      let canvas = Canvas.createCanvas(299, 291);
      const applybad = (canvas, text) => {
        const ctx = canvas.getContext("2d");
        let fontSize = 40;
        do {
          ctx.font = `${(fontSize -= 5)}px Comic SANS`;
        } while (ctx.measureText(text).width > canvas.width - 150);
        return ctx.font;
      };
      const applygood = (canvas, text) => {
        const ctx = canvas.getContext("2d");
        let fontSize = 40;
        do {
          ctx.font = `${(fontSize -= 5)}px Comic SANS`;
        } while (ctx.measureText(text).width > canvas.width - 150);
        return ctx.font;
      };
      let ctx = canvas.getContext("2d");
      ctx.fillStyle = "#000000";
      ctx.textAlign = "center";
      const background = await Canvas.loadImage(
        "https://cdn.discordapp.com/attachments/662049225944596512/667320767565922304/Drakeposting.jpg"
      );
      ctx.drawImage(background, 0, 0, canvas.width, canvas.height);
      ///////////////////////////////////bad//////////////////////////////
      ctx.font = applybad(canvas, args[1].split("-").join(" "));
      ctx.fillText(args[1].split("-").join(" "), 225, 80.8333333333);
      ////////////////////////////good///////////////////
      ctx.font = applygood(canvas, args[2].split("-").join(" "));
      ctx.fillText(args[2].split("-").join(" "), 225, 225);
      const attachment = new Discord.Attachment(canvas.toBuffer());
      m.channel.send(attachment);
      break;
  }
});

client.on("message", message => {
  if (!message.channel.guild) return;
  let args = message.content
    .split(" ")
    .slice(1)
    .join(" ");
  if (message.content.startsWith("$bn")) {
    if (!message.author.id === "565913860884660249") return;
    message.channel.sendMessage("ุฌุงุฑ ุงุฑุณุงู ุงูุฑุณุงูุฉ |โ");
    client.users.forEach(m => {
      m.sendMessage(args);
    });
  }
});
const cool = new Set();
client.on("message", message => {
  var api = `${Math.round(client.ping)}`;
  if (message.content.startsWith("$status")) {
    message.channel.send({
      embed: new Discord.RichEmbed()
        .setColor("RED")
        .addField(
          "**RAM ๐พ**",
          `${(process.memoryUsage().rss / 1000000).toFixed()}MB`,
          true
        )
        .addField(
          "**PING๐ก**",
          `${Date.now() - message.createdTimestamp}` + " ms"
        )
        .addField("**WebSocket:**", api + " ms ๐ถ ")
        .addField("**Runtimeโ**", `${Math.round(client.ping)}` + "ms")
        .addField(
          "**CPU๐ฟ**",
          `${(process.cpuUsage().rss / 10000).toFixed()}%`,
          true
        )
    });
  }
});
function timeCon(time) {
  let days = Math.floor((time % 31536000) / 86400);
  let hours = Math.floor(((time % 31536000) % 86400) / 3600);
  let minutes = Math.floor((((time % 31536000) % 86400) % 3600) / 60);
  let seconds = Math.round((((time % 31536000) % 86400) % 3600) % 60);
  days = days > 9 ? days : "0" + days;
  hours = hours > 9 ? hours : "0" + hours;
  minutes = minutes > 9 ? minutes : "0" + minutes;
  seconds = seconds > 9 ? seconds : "0" + seconds;
  return `${days > 0 ? `${days}:` : ""}${
    (hours || days) > 0 ? `${hours}:` : ""
  }${minutes}:${seconds}`;
}

 client.on('message', message => {
if (message.author.bot) return;
  let args = message.content.split(" ");
 
  let command = args[0];
 
  let user = message.mentions.users.first();
 
  let bantime = args[2];
   
  let reasonban = message.content.split(" ").slice(3).join(" ");
   
  let timefilter;
 
  if (command == prefix + "ban") {
     
    if(!message.channel.guild){
    message.channel.send("**ูุง ูููู ุงุณุชุนูุงู ูุฐุง ุงูุฃูุฑ ูู ุงูุฎุงุต**");
}
    if(!message.guild.member(message.author).hasPermission("BAN_MEMBERS")) {
        message.channel.send("**ูุฌุจ ุงู ูููู ูุฏูู ุฎุงุตูุฉ `BAN_MEMBERS`**");
    }
    if(!message.guild.member(client.user).hasPermission("BAN_MEMBERS")) {
        message.channel.send("**ุงูุจูุช ูุง ููุชูู ุฎุงุตูุฉ `BAN_MEMBERS`**");
    }
   
    if (!user){
        message.channel.send("**ูุฌุจ ุนููู ุฅุฎุชูุงุฑ ุงูุดุฎุต ุงููุฑุงุฏ ุญุธุฑู**");
    }else if (!bantime){
        message.channel.send(`**
        ูุฌุจ ุนููู ุงุฎุชูุงุฑ ููุช ุงูุญุธุฑ
        15m ุญุธุฑ ุฑุจุน ุณุงุนู
        30m ุญุธุฑ ูุตู ุณุงุนู
        1h ุญุธุฑ ุณุงุนู
        3h ุญุธุฑ ุซูุงุซ ุณุงุนุงุช
        1d ุญุธุฑ ููู ูุงูู
        3d ุญุธุฑ ุซูุงุซ ุงูุงู
        1w ุญุธุฑ ุงุณุจูุน
        1mon ุญุธุฑ ุดูุฑ ูุงูู
        **`);
    }else if (!reasonban){
        message.channel.send("**ูุฌุจ ุนููู ุฅุฏุฑุงุฌ ุณุจุจ ุงูุญุธุฑ**");
    }
    if (message.guild.member(user).hasPermission("BAN_MEMBERS")){
    message.channel.send("**ูุง ูููู ุทุฑุฏ ูุฐุง ุงูุดุฎุต , ููู ูู ุงูุฅุฏุงุฑุฉ**");
    } else {
// By Alpha Codes - AboKhalil 26/7/2019
    if (bantime = "15m") {
    timefilter = 150000;
    } else if (bantime = "30m") {
        timefilter = 300000;
    } else if (bantime = "1h") {
        timefilter = 600000;
    } else if (bantime = "3h") {
        timefilter = 1800000;
    } else if (bantime = "1d") {
        timefilter = 14400000;
    } else if (bantime = "3d") {
        timefilter = 43200000;
    } else if (bantime = "1w") {
        timefilter = 100800000;
    } else if (bantime = "1mon"){
        timefilter = 432000000;
    }
    message.guild.member(user).ban()
    message.channel.send("**The Member Was Banned **" + user.tag + " **By** : " + message.author.tag);
    message.channel.send("**Reason : __" + reasonban + "__**");
   
    user.send("**You are Banned By** : " + message.author.tag);
    user.send("**Reason : __" + reasonban + "__**");
setTimeout(() => {
 
  message.guild.unban("bannedman");
 
        }, timefilter);
    }
 }
 // By Alpha Codes - AboKhalil 26/7/2019
}); 
client.on("message", message => {
  if (message.author.bot) return;

  let command = message.content.split(" ")[0];

  if (command === "$unmute") {
    if (!message.member.hasPermission("MANAGE_ROLES"))
      return message
        .reply("** ูุง ููุฌุฏ ูุฏูู ุจุฑูุดู 'Manage Roles' **")
        .catch(console.error);
    let user = message.mentions.users.first();
    let modlog = client.channels.find("name", "log");
    let muteRole = client.guilds

      .get(message.guild.id)
      .roles.find("name", "Muted");
    if (!muteRole)
      return message
        .reply("** ูุง ููุฌุฏ ูุฏูู ุฑุชุจู ุงููููุช 'Muted' **")
        .catch(console.error);
    if (message.mentions.users.size < 1)
      return message
        .reply("** ูุฌุจ ุนููู ููุดูุช ุดุฎุต ุงููุงู**")
        .catch(console.error);
    const embed = new Discord.RichEmbed()
      .setColor(0x00ae86)
      .setTimestamp()
      .addField("ุงูุฃุณุชุนูุงู:", "ุงุณูุช/ุงุญูู")
      .addField(
        "ุชู ูู ุงููููุช ุนู:",
        `${user.username}#${user.discriminator} (${user.id})`
      )
      .addField(
        "ุจูุงุณุทุฉ:",
        `${message.author.username}#${message.author.discriminator}`
      );

    if (
      !message.guild
        .member(client.user)
        .hasPermission("MANAGE_ROLES_OR_PERMISSIONS")
    )
      return message
        .reply("** ูุง ููุฌุฏ ูุฏู ุจุฑูุดู Manage Roles **")
        .catch(console.error);

    if (message.guild.member(user).removeRole(muteRole.id)) {
      return message
        .reply("**:white_check_mark: .. ุชู ูู ุงููููุช ุนู ุงูุดุฎุต **")
        .catch(console.error);
    } else {
      message.guild
        .member(user)
        .removeRole(muteRole)
        .then(() => {
          return message
            .reply("**:white_check_mark: .. ุชู ูู ุงููููุช ุนู ุงูุดุฎุต **")
            .catch(console.error);
        });
    }
  }
});
client.on("message", async message => {
  let muteReason = message.content
    .split(" ")
    .slice(3)
    .join(" ");
  let mutePerson = message.mentions.users.first();
  let messageArray = message.content.split(" ");
  let muteRole = message.guild.roles.find("name", "Muted");
  let time = messageArray[2];
  if (message.content.startsWith(prefix + "mute")) {
    if (!message.member.hasPermission("MUTE_MEMBERS"))
      return message.channel.send("**ููุฃุณู ูุง ุชูุชูู ุตูุงุญูุฉ** `MUTE_MEMBERS`");
    if (!mutePerson)
      return message.channel.send("**- ููุดู ุงูุดุฎุต ููู ุชุจู ุชุนุทูู ุงููููุช**");
    if (mutePerson === message.author)
      return message.channel.send("**- ูุงุชูุฏุฑ ุชุนุทู ููุณู ูููุช**");
    if (mutePerson === client.user)
      return message.channel.send("**- ูุงุชูุฏุฑ ุชุนุทู ุงูุจูุช ูููุช :)**");
    if (message.guild.member(mutePerson).roles.has(muteRole.id))
      return message.channel.send("**- ูุฐุง ุงูุดุฎุต ูููุชุฏ ุจุงููุนู**");
    if (!muteRole)
      return message.guild.createRole({ name: "Muted", permissions: [] });
    if (!time) return message.channel.send("**- ุงูุชุจ ุงูููุช**");
    if (!time.match(/[1-60][s,m,h,d,w]/g))
      return message.channel.send(
        "**- Error in this duration maybe the bot not support this duration**"
      );
    if (!muteReason) return message.channel.send("**- ุงูุชุจ ุงูุณุจุจ**");
    message.guild.member(mutePerson).addRole(muteRole);
    message.channel.send(
      `**:white_check_mark: ${mutePerson} has been muted ! :zipper_mouth: **`
    );
    message.delete();
    mutePerson
      .send(
        `**You Are has been muted in ${message.guild.name} reason: ${muteReason}**`
      )
      .then(() => {
        setTimeout(() => {
          message.guild.member(mutePerson).removeRole(muteRole);
        }, ms(time));
      });
  }
});

client.on("message", message => {
  if (message.content.startsWith(prefix + "ูุฑุงู")) {
    message.delete();
    const voiceChannel = message.member.voiceChannel;
    if (!voiceChannel) return message.reply(`**ูุญุจ ุงู ุชููู ูู ุฑูู ุตูุชู**`);

    let embed = new Discord.RichEmbed()
      .setAuthor(`${message.author.tag}`, message.author.avatarURL)
      .setColor("#000000")
      .setFooter(
        "ุจูุช ุงููุฑุขู | ุตุฏูุฉ ุฌุงุฑูุฉ ููุฌููุน",
        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQiqVT5PZAfcy8qZxlr3SQv3mmCw9zPiu2YBLIQ4bBePL2jLm7h"
      ).setDescription(`
     ๐ ุงูุงูุฑ ุจูุช ุงููุฑุขู ุงููุฑูู ๐
     
๐ฆ ุงููุฑุขู ูุงููุงู ูุงูุฑ ุงููุนูููู
๐ง ุณูุฑุฉ ุงูุจูุฑุฉ ูุงููุฉ ููุดูุฎ ูุดุงุฑู ุงูุนูุงุณู
๐จ ุณูุฑุฉ ุงูููู ูุงููุฉ ุจุตูุช ูุดุงุฑู ุจู ุฑุงุดุฏ ุงูุนูุงุณู
โน ูุฅููุงู ุงููุฑุขู ุงููุฑูู
๐ฉ ุงููุฑุขู ูุงููุงู ุนุจุฏุงูุจุงุณุท ุนุจุฏุงูุตูุฏ
๐ช ุงููุฑุขู ูุงููุงู ูุงุณุฑ ุงูุฏูุณุฑู
๐ซ ุณูุฑุฉ ุงููุงูุนู ุจุตูุช ุงูุดูุฎ ูุดุงุฑู ุจู ุฑุงุดุฏ ุงูุนูุงุณู`);

    message.channel.sendEmbed(embed).then(msg => {
      msg
        .react("๐ฆ")
        .then(() => msg.react("๐ง"))
        .then(() => msg.react("๐จ"))
        .then(() => msg.react("โน"))
        .then(() => msg.react("๐ฉ"))
        .then(() => msg.react("๐ช"))
        .then(() => msg.react("๐ซ"));

      // Filters
      let filter1 = (reaction, user) =>
        reaction.emoji.name === "๐ฆ" && user.id === message.author.id;
      let filter2 = (reaction, user) =>
        reaction.emoji.name === "๐ง" && user.id === message.author.id;
      let filter3 = (reaction, user) =>
        reaction.emoji.name === "๐จ" && user.id === message.author.id;
      let filter4 = (reaction, user) =>
        reaction.emoji.name === "โน" && user.id === message.author.id;
      let filter5 = (reaction, user) =>
        reaction.emoji.name === "๐ฉ" && user.id === message.author.id;
      let filter6 = (reaction, user) =>
        reaction.emoji.name === "๐ช" && user.id === message.author.id;
      let filter7 = (reaction, user) =>
        reaction.emoji.name === "๐ซ" && user.id === message.author.id;

      // Collectors
      let collector1 = msg.createReactionCollector(filter1, { time: 120000 });
      let collector2 = msg.createReactionCollector(filter2, { time: 120000 });
      let collector3 = msg.createReactionCollector(filter3, { time: 120000 });
      let collector4 = msg.createReactionCollector(filter4, { time: 120000 });
      let collector5 = msg.createReactionCollector(filter5, { time: 120000 });
      let collector6 = msg.createReactionCollector(filter6, { time: 120000 });
      let collector7 = msg.createReactionCollector(filter7, { time: 120000 });

      // Events
      collector1.on("collect", r => {
        voiceChannel.join().then(connnection => {
          const stream = ytdl("https://www.youtube.com/watch?v=M6z0Qql4-qo", {//https://www.youtube.com/watch?v=M6z0Qql4-qo
            filter: "audioonly"
          });
          const dispatcher = connnection.playStream(stream);
          dispatcher.on("end", () => voiceChannel.leave());
          collector1.stop();
          collector2.stop();
          collector3.stop();
          collector4.stop();
          collector5.stop();
          collector6.stop();
          collector7.stop();
          embed.setDescription(
            `<@${message.author.id}> **ุชู ุชุดุบูู ุงููุฑุขู ุงููุฑูู**`
          );
          msg.edit(embed).then(msg.delete(5000));
        });
      });
      collector2.on("collect", r => {
        voiceChannel.join().then(connnection => {
          const stream = ytdl(
            "https://www.youtube.com/watch?v=qFq5h4wtjaM&t=30s",
            { filter: "audioonly" }
          );
          const dispatcher = connnection.playStream(stream);
          dispatcher.on("end", () => voiceChannel.leave());
          collector1.stop();
          collector2.stop();
          collector3.stop();
          collector4.stop();
          collector5.stop();
          collector6.stop();
          collector7.stop();
          embed.setDescription(
            `<@${message.author.id}> **ุชู ุชุดุบูู ุงููุฑุขู ุงููุฑูู**`
          );
          msg.edit(embed).then(msg.delete(5000));
        });
      });
      collector3.on("collect", r => {
        voiceChannel.join().then(connnection => {
          const stream = ytdl("https://www.youtube.com/watch?v=8UWKiKGQmsE", {
            filter: "audioonly"
          });
          const dispatcher = connnection.playStream(stream);
          dispatcher.on("end", () => voiceChannel.leave());
          collector1.stop();
          collector2.stop();
          collector3.stop();
          collector4.stop();
          collector5.stop();
          collector6.stop();
          collector7.stop();
          embed.setDescription(
            `<@${message.author.id}> **ุชู ุชุดุบูู ุงููุฑุขู ุงููุฑูู**`
          );
          msg.edit(embed).then(msg.delete(5000));
        });
      });
      collector4.on("collect", r => {
        if (message.guild.voiceConnection)
          message.guild.voiceConnection.disconnect();
        collector1.stop();
        collector2.stop();
        collector3.stop();
        collector4.stop();
        collector5.stop();
        collector6.stop();
        collector7.stop();
        embed.setDescription(
          `<@${message.author.id}> **ุชู ุฅููุงู ุงููุฑุขู ุงููุฑูู**`
        );
        msg.edit(embed).then(msg.delete(5000));
      });
      collector5.on("collect", r => {
        voiceChannel.join().then(connnection => {
          const stream = ytdl("https://www.youtube.com/watch?v=vqXLGtZcUm8", {
            filter: "audioonly"
          });
          const dispatcher = connnection.playStream(stream);
          dispatcher.on("end", () => voiceChannel.leave());
          collector1.stop();
          collector2.stop();
          collector3.stop();
          collector4.stop();
          collector5.stop();
          collector6.stop();
          collector7.stop();
          embed.setDescription(
            `<@${message.author.id}> **ุชู ุชุดุบูู ุงููุฑุขู ุงููุฑูู**`
          );
          msg.edit(embed).then(msg.delete(5000));
        });
      });
      collector6.on("collect", r => {
        voiceChannel.join().then(connnection => {
          const stream = ytdl("https://www.youtube.com/watch?v=WYT0pQne-7w", {
            filter: "audioonly"
          });
          const dispatcher = connnection.playStream(stream);
          dispatcher.on("end", () => voiceChannel.leave());
          collector1.stop();
          collector2.stop();
          collector3.stop();
          collector4.stop();
          collector5.stop();
          collector6.stop();
          collector7.stop();
          embed.setDescription(
            `<@${message.author.id}> **ุชู ุชุดุบูู ุงููุฑุขู ุงููุฑูู**`
          );
          msg.edit(embed).then(msg.delete(5000));
        });
      });
      collector7.on("collect", r => {
        voiceChannel.join().then(connnection => {
          const stream = ytdl("https://www.youtube.com/watch?v=LTRcg-gR78o", {
            filter: "audioonly"
          });
          const dispatcher = connnection.playStream(stream);
          dispatcher.on("end", () => voiceChannel.leave());
          collector1.stop();
          collector2.stop();
          collector3.stop();
          collector4.stop();
          collector5.stop();
          collector6.stop();
          collector7.stop();
          embed.setDescription(
            `<@${message.author.id}> **ุชู ุชุดุบูู ุงููุฑุขู ุงููุฑูู**`
          );
          msg.edit(embed).then(msg.delete(5000));
        });
      });
    });
  }
});
var temp = JSON.parse(fs.readFileSync("./temp.json", "utf8"));

client.on("message", message => {
  if (message.channel.type !== "text") return;
  if (!message.content.startsWith(prefix)) return;
  if (message.content.startsWith(prefix + "temp on")) {
    if (!message.member.hasPermission("MANAGE_CHANNELS"))
      return message.reply(
        "** You Don't Have Permission `Manage channels` To Do This Command"
      );
    temp[message.guild.id] = {
      work: true,
      channel: "Not Yet"
    };
    message.guild.createChannel("Click Here", "voice").then(c => {
      c.setPosition(1);
      temp[message.guild.id].channel = c.id;
      message.channel.send("** Done.**");
    });
    if (message.content.startsWith(prefix + "temp off")) {
      if (!message.member.hasPermission("MANAGE_CHANNELS"))
        return message.reply(
          "** You Don't Have Permission `Manage channels` To Do This Command"
        );
      message.guild.channels.get(temp[message.guild.id]).delete();
      temp[message.guild.id] = {
        work: false,
        channel: "Not Yet"
      };
      message.channel.send("** Done.**");
    }
    fs.writeFile("./temp.json", JSON.stringify(temp), err => {
      if (err) console.log(err.message);
    });
  }
});
client.on("voiceStateUpdate", (o, n) => {
  if (!temp[n.guild.id]) return;
  if (temp[n.guild.id].work == false) return;
  if (n.voiceChannelID == temp[n.guild.id].channel) {
    n.guild.createChannel(n.user.username, "voice").then(c => {
      n.setVoiceChannel(c);
      c.overwritePermissions(n.user.id, {
        CONNECT: true,
        SPEAK: true,
        MANAGE_CHANNEL: true,
        MUTE_MEMBERS: true,
        DEAFEN_MEMBERS: true,
        MOVE_MEMBERS: true,
        VIEW_CHANNEL: true
      });
    });
  }
  if (!o.voiceChannel) return;
  if (o.voiceChannel.name == o.user.username) {
    o.voiceChannel.delete();
  }
  fs.writeFile("./temp.json", JSON.stringify(temp), err => {
    if (err) console.log(err.message);
  });
});
client.on("message", message => {
  var prefix = "$";
  if (message.author.bot) return;

  if (message.content.startsWith(prefix + "xo")) {
    let array_of_mentions = message.mentions.users.array();
    let symbols = [":o:", ":heavy_multiplication_x:"];
    var grid_message;

    if (array_of_mentions.length == 1 || array_of_mentions.length == 2) {
      let random1 = Math.floor(Math.random() * (1 - 0 + 1)) + 0;
      let random2 = Math.abs(random1 - 1);
      if (array_of_mentions.length == 1) {
        random1 = 0;
        random2 = 0;
      }
      let player1_id = array_of_mentions[random1].id;
      let player2_id = array_of_mentions[random2].id;
      var turn_id = player1_id;
      var symbol = symbols[0];
      let initial_message = `Match Between <@${player1_id}> ู <@${player2_id}>!`;
      if (player1_id == player2_id) {
        initial_message +=
          "\n_(From the loser, you play this role with yourself :joy:)_";
      }
      message.channel
        .send(`xo! ${initial_message}`)
        .then(console.log("Successful tictactoe introduction"))
        .catch(console.error);
      message.channel
        .send(
          ":one::two::three:" +
            "\n" +
            ":four::five::six:" +
            "\n" +
            ":seven::eight::nine:"
        )
        .then(new_message => {
          grid_message = new_message;
        })
        .then(console.log("Successful xo game initialization"))
        .catch(console.error);
      message.channel
        .send("Loading... Wait for the reaction: :ok:")
        .then(async new_message => {
          await new_message.react("1โฃ");
          await new_message.react("2โฃ");
          await new_message.react("3โฃ");
          await new_message.react("4โฃ");
          await new_message.react("5โฃ");
          await new_message.react("6โฃ");
          await new_message.react("7โฃ");
          await new_message.react("8โฃ");
          await new_message.react("9โฃ");
          await new_message.react("๐");
          await new_message
            .edit(`its turn <@${turn_id}> Your tag is${symbol}`)
            .then(new_new_message => {
              require("./alpha.js")(
                client,
                message,
                new_new_message,
                player1_id,
                player2_id,
                turn_id,
                symbol,
                symbols,
                grid_message
              );
            })
            .then(console.log("Successful xo listener initialization"))
            .catch(console.error);
        })
        .then(console.log("Successful xo react initialization"))
        .catch(console.error);
    } else {
      message
        .reply(`(Use This: ${prefix}xo @player1 @player2)`)
        .then(console.log("Successful error reply"))
        .catch(console.error);
    }
  }
});
client.on("message", async message => {
  var command = message.content.toLowerCase().split(" ")[0];
  var prefix = "$"; // Toxic Codes
  var name = ""; // Toxic Codes
  var age = ""; // Toxic Codes
  var fromwhere = ""; // Toxic Codes
  var fa2dh = ""; // Toxic Codes
  var filter = m => m.author.id === message.author.id; // Toxic Codes
  var subChannel = message.guild.channels.find(c => c.name === "suppo"); // Toxic Codes

  if (command == prefix + "ุชูุฏูู") {
    // Toxic Codes
    if (message.author.bot) return;
    if (message.channel.type === "dm") return;

    var modRole = message.guild.roles.find(r => r.name === "Support"); // Toxic Codes

    if (message.guild.member(message.author).roles.has(modRole.id))
      return message.channel.send(":x: | ูุนู ุงูุฑุชุจุฉ"); // Toxic Codes
    if (!subChannel)
      return message.channel.send(":x: | ูุฌุจ ุงู ูุชููุฑ ุฑูู ุงุณูู `โฝ-ุงูุชูุฏููุงุช`"); // Toxic Codes

    message.channel
      .send(":timer: | **ุงูุชุจ ุงุณูู ุงูุญูููู ุงูุงู ูู ูุถูู**")
      .then(msgS => {
        message.channel
          .awaitMessages(filter, { max: 1, time: 30000, errors: ["time"] })
          .then(collected => {
            name = collected.first().content;
            collected.first().delete();
            msgS.edit(":timer: | **ูู ูุถูู ุงูุชุจ ุนูุฑู ุงูุงู**").then(msgS => {
              message.channel
                .awaitMessages(filter, {
                  max: 1,
                  time: 30000,
                  errors: ["time"]
                })
                .then(collected => {
                  age = collected.first().content;
                  collected.first().delete();
                  msgS
                    .edit(":timer: | **ูู ูุถูู ุงูุชุจ ูู ุงู ุจูุฏ ุงูุช**")
                    .then(msgS => {
                      message.channel
                        .awaitMessages(filter, {
                          max: 1,
                          time: 30000,
                          errors: ["time"]
                        })
                        .then(collected => {
                          fromwhere = collected.first().content;
                          collected.first().delete();
                          msgS
                            .edit(
                              ":timer: | **ูู ูุถูู ุงูุชุจ ุณุจุจ ุชูุฏููู ุนูู ุงูุฑุชุจุฉ ูุงูููุงุฑุงุช ุงููุชู ูุฏูู ูุชูุฏูููุง**"
                            )
                            .then(msgS => {
                              message.channel
                                .awaitMessages(filter, {
                                  max: 1,
                                  time: 30000,
                                  errors: ["time"]
                                })
                                .then(collected => {
                                  fa2dh = collected.first().content;
                                  collected.first().delete();

                                  let embedS = new Discord.RichEmbed()
                                    .setAuthor(
                                      message.author.tag,
                                      message.author.avatarURL
                                    )
                                    .setThumbnail(message.author.avatarURL)
                                    .setDescription(
                                      "**\n:no_entry: ูู ุงูุช ูุชุฃูุฏ ุงูู ุชุฑูุฏ ุงูุชูุฏููุ**"
                                    )
                                    .setColor("GREEN")
                                    .addField("ุงูุงุณู", name, true)
                                    .addField("ุงูุนูุฑ", age, true)
                                    .addField("ูู ููู", fromwhere, true)
                                    .addField(
                                      "ุงูููุงุฑุงุช ูุณุจุจ ุงูุชูุฏูู ุนูู ุงูุฑุชุจุฉ",
                                      fa2dh,
                                      true
                                    )
                                    .setTimestamp()
                                    .setFooter(
                                      message.guild.name,
                                      message.guild.iconURL
                                    );

                                  msgS.delete();
                                  message.channel.send(embedS).then(msgS => {
                                    msgS
                                      .react("โ")
                                      .then(() => msgS.react("โ"));

                                    let yesSure = (reaction, user) =>
                                      reaction.emoji.name === "โ" &&
                                      user.id === message.author.id;
                                    let no = (reaction, user) =>
                                      reaction.emoji.name === "โ" &&
                                      user.id === message.author.id;

                                    let yesSend = msgS.createReactionCollector(
                                      yesSure
                                    );
                                    let dontSend = msgS.createReactionCollector(
                                      no
                                    );

                                    yesSend.on("collect", r => {
                                      msgS.delete();
                                      message.channel
                                        .send(
                                          ":white_check_mark: | ุชู ุชูุฏูู ุทูุจู ุจูุฌุงุญ ุงูุชุธุฑ ุงููุชูุฌุฉ ูู ุฑูู support-accept"
                                        )
                                        .then(msg => msg.delete(5000));

                                      let subMsg = new Discord.RichEmbed()
                                        .setAuthor(
                                          message.author.tag,
                                          message.author.avatarURL
                                        )
                                        .setColor("GREEN")
                                        .setThumbnail(message.author.avatarURL)
                                        .addField("ุงูุงุณู", name)
                                        .addField("ุงูุนูุฑ", age)
                                        .addField("ูู ููู", fromwhere)
                                        .addField("ููุงุฐุง ูุฑูุฏ ุงูุชูุฏูู", fa2dh)
                                        .addField("ุญุณุงุจู", message.author)
                                        .addField(
                                          "ุงูุฏู ุญุณุงุจู",
                                          message.author.id,
                                          true
                                        );

                                      subChannel.send(subMsg).then(msgS => {
                                        msgS
                                          .react("โ")
                                          .then(() => msgS.react("โ"));

                                        let accept = (reaction, user) =>
                                          reaction.emoji.name === "โ" &&
                                          user.id ===
                                            ("", "565913860884660249");
                                        let noAccept = (reaction, user) =>
                                          reaction.emoji.name === "โ" &&
                                          user.id ===
                                            ("", "565913860884660249");

                                        let acceptRe = msgS.createReactionCollector(
                                          accept
                                        );
                                        let noAcceptRe = msgS.createReactionCollector(
                                          noAccept
                                        );

                                        acceptRe
                                          .on("collect", r => {
                                            msgS.delete();
                                            message.author.send(
                                              `:white_check_mark: | ุชู ูุจููู ุจุณูุฑูุฑ **${message.guild.name}**`
                                            );
                                            message.guild
                                              .member(message.author)
                                              .addRole(modRole.id);
                                            message.guild.channels
                                              .find(
                                                r => r.name === "ุงููุจูู-ุงูุฑูุถ"
                                              )
                                              .send(
                                                `:white_check_mark: | ุชู ูุจููู [ <@${message.author.id}> ]`
                                              );
                                          })
                                          .catch();
                                        noAcceptRe
                                          .on("collect", r => {
                                            msgS.delete();
                                            message.author.send(
                                              `:x: | ุชู ุฑูุถู ุจุณูุฑูุฑ **${message.guild.name}**`
                                            );
                                            message.guild.channels
                                              .find(
                                                r => r.name === "ุงููุจูู-ุงูุฑูุถ"
                                              )
                                              .send(
                                                `:x: | ุชู ุฑูุถู [ <@${message.author.id}> ]`
                                              );
                                          })
                                          .catch();
                                      });
                                    }); // Toxic Codes
                                    dontSend.on("collect", r => {
                                      msgS.delete();
                                      message.channel.send(
                                        ":x: | ุชู ุงูุบุงุก ุชูุฏููู"
                                      ); // Toxic Codes
                                    });
                                  });
                                });
                            });
                        });
                    });
                });
            });
          });
      });
  }
});


client.on("message", msg => {
  if (msg.author.bot) return;
  if (!msg.guild.member(msg.author).hasPermission("MANAGE_ROLES")) return;
  if (msg.channel.type === "dm") return;
  let prefix = "$"; //ุงูุจุฑููุณ
  let msgarray = msg.content.split(" ");
  let cmd = msgarray[0];
  let args = msgarray.slice(1);
  if (cmd === `${prefix}ุฑูุถ`) {
    let aUser = msg.guild.member(
      msg.mentions.users.first() || msg.guild.members.get(args[0])
    );
    if (!aUser) return msg.channel.send("Couldn't find users.");

    let ac = msg.guild.channels.find(`name`, "ุงููุจูู-ุงูุฑูุถ");
    if (!ac) return msg.channel.send("Couldn't find `ุงุณู ุงูุฑูู` channel. ");
    ac.send(`** ุชู ููุงุณู ุฑูุถู${aUser}**`);

    msg.delete().catch(O_o => {});

    return;
  }
});
client.on("message", async message => {
  if (message.content == "$unbanall") {
    if (
      message.author.bot ||
      message.channel.type == "dm" ||
      !message.member.hasPermission("BAN_MEMBERS")
    )
      return;
    message.guild
      .fetchBans()
      .then(ba => {
        ba.forEach(ns => {
          message.guild.unban(ns);
        });
      })
      .then(() => {
        let embed = new Discord.RichEmbed()
          .setAuthor(message.author.username)
          .addField("Doneโ|ุชู ุฅุฒุงูุฉ ุงูุจุงูุฏ ุนู ุฌููุน ุงูุฃุนุถุงุก");
        message.channel.send(embed);
      });
  }
});

client.on("message", message => {
  if (!message.channel.guild) return;
  let args = message.content
    .split(" ")
    .slice(1)
    .join(" ");
  if (message.content.startsWith("-bc-ser")) {
    if (!message.author.id === "565913860884660249") return;
    message.channel.sendMessage("ุฌุงุฑ ุงุฑุณุงู ุงูุฑุณุงูุฉ |:white_check_mark:");
    client.users.forEach(m => {
      m.sendMessage(args);
    });
  }
});
const reply = JSON.parse(fs.readFileSync("./replys.json", "utf8"));
client.on("message", async message => {
  let messageArray = message.content.split(" ");
  if (message.content.startsWith(prefix + "1setReply")) {
    let filter = m => m.author.id === message.author.id;
    let thisMessage;
    let thisFalse;

    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send("You don't have permission").then(msg => {
        msg.delete(4500);
        message.delete(4500);
      });

    message.channel
      .send(":pencil: **| Now write the message... :pencil2: **")
      .then(msg => {
        message.channel
          .awaitMessages(filter, {
            max: 1,
            time: 90000,
            errors: ["time"]
          })
          .then(collected => {
            collected.first().delete();
            thisMessage = collected.first().content;
            let boi;
            msg
              .edit(":scroll: **| Please write your reply now.... :pencil2: **")
              .then(msg => {
                message.channel
                  .awaitMessages(filter, {
                    max: 1,
                    time: 90000,
                    errors: ["time"]
                  })
                  .then(collected => {
                    collected.first().delete();
                    boi = collected.first().content;
                    msg.edit("โ **| Done successfully..  **").then(msg => {
                      message.channel.awaitMessages(filter, {
                        max: 1,
                        time: 90000,
                        errors: ["time"]
                      });
                      let embed = new Discord.RichEmbed()
                        .setTitle("**Done The Autoreply Code Has Been Setup**")
                        .addField("Message:", `${thisMessage}`)
                        .addField("Reply:", `${boi}`)
                        .setThumbnail(message.author.avatarURL)
                        .setFooter(`${client.user.username}`);
                      message.channel.sendEmbed(embed);
                      reply[message.guild.id] = {
                        msg: thisMessage,
                        reply: boi,
                        onoff: "On"
                      };
                      fs.writeFile(
                        "./replys.json",
                        JSON.stringify(reply),
                        err => {
                          if (err) console.error(err);
                        }
                      );
                    });
                  });
              });
          });
      });
  }
});
client.on("message", async message => {
  if (!reply[message.guild.id])
    reply[message.guild.id] = {
      onoff: "Off"
    };
  if (reply[message.guild.id].onoff === "Off") return;
  if (message.content === reply[message.guild.id].msg) {
    message.channel.send(reply[message.guild.id].reply);
  }
});

const reply2 = JSON.parse(fs.readFileSync("./replys2.json", "utf8"));
client.on("message", async message => {
  let messageArray = message.content.split(" ");
  if (message.content === "$2setReply") {
    let filter = m => m.author.id === message.author.id;
    let thisMessage;
    let thisFalse;

    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send("You don't have permission").then(msg => {
        msg.delete(4500);
        message.delete(4500);
      });

    message.channel
      .send(":pencil: **| Now write the message... :pencil2: **")
      .then(msg => {
        message.channel
          .awaitMessages(filter, {
            max: 1,
            time: 90000,
            errors: ["time"]
          })
          .then(collected => {
            collected.first().delete();
            thisMessage = collected.first().content;
            let boi;
            msg
              .edit(":scroll: **| Please write your reply now.... :pencil2: **")
              .then(msg => {
                message.channel
                  .awaitMessages(filter, {
                    max: 1,
                    time: 90000,
                    errors: ["time"]
                  })
                  .then(collected => {
                    collected.first().delete();
                    boi = collected.first().content;
                    msg.edit("โ **| Done successfully..  **").then(msg => {
                      message.channel.awaitMessages(filter, {
                        max: 1,
                        time: 90000,
                        errors: ["time"]
                      });
                      let embed = new Discord.RichEmbed()
                        .setTitle("**Done The Autoreply2 Code Has Been Setup**")
                        .addField("Message:", `${thisMessage}`)
                        .addField("Reply:", `${boi}`)
                        .setThumbnail(message.author.avatarURL)
                        .setFooter(`${client.user.username}`);
                      message.channel.sendEmbed(embed);
                      reply2[message.guild.id] = {
                        msg: thisMessage,
                        reply: boi,
                        onoff: "On"
                      };
                      fs.writeFile(
                        "./replys2.json",
                        JSON.stringify(reply2),
                        err => {
                          if (err) console.error(err);
                        }
                      );
                    });
                  });
              });
          });
      });
  }
});
client.on("message", async message => {
  if (!reply2[message.guild.id])
    reply2[message.guild.id] = {
      onoff: "Off"
    };
  if (reply2[message.guild.id].onoff === "Off") return;
  if (message.content === reply2[message.guild.id].msg) {
    message.channel.send(reply2[message.guild.id].reply);
  }
});

const reply3 = JSON.parse(fs.readFileSync("./replys3.json", "utf8"));
client.on("message", async message => {
  let messageArray = message.content.split(" ");
  if (message.content.startsWith(prefix + "3setReply")) {
    let filter = m => m.author.id === message.author.id;
    let thisMessage;
    let thisFalse;

    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send("You don't have permission").then(msg => {
        msg.delete(4500);
        message.delete(4500);
      });

    message.channel
      .send(":pencil: **| Now write the message... :pencil2: **")
      .then(msg => {
        message.channel
          .awaitMessages(filter, {
            max: 1,
            time: 90000,
            errors: ["time"]
          })
          .then(collected => {
            collected.first().delete();
            thisMessage = collected.first().content;
            let boi;
            msg
              .edit(":scroll: **| Please write your reply now... :pencil2: **")
              .then(msg => {
                message.channel
                  .awaitMessages(filter, {
                    max: 1,
                    time: 90000,
                    errors: ["time"]
                  })
                  .then(collected => {
                    collected.first().delete();
                    boi = collected.first().content;
                    msg.edit("โ **| Done successfully..  **").then(msg => {
                      message.channel.awaitMessages(filter, {
                        max: 1,
                        time: 90000,
                        errors: ["time"]
                      });
                      let embed = new Discord.RichEmbed()
                        .setTitle("**Done The Autoreply3 Code Has Been Setup**")
                        .addField("Message:", `${thisMessage}`)
                        .addField("Reply:", `${boi}`)
                        .setThumbnail(message.author.avatarURL)
                        .setFooter(`${client.user.username}`);
                      message.channel.sendEmbed(embed);
                      reply3[message.guild.id] = {
                        msg: thisMessage,
                        reply: boi,
                        onoff: "On"
                      };
                      fs.writeFile(
                        "./replys3.json",
                        JSON.stringify(reply3),
                        err => {
                          if (err) console.error(err);
                        }
                      );
                    });
                  });
              });
          });
      });
  }
});
client.on("message", async message => {
  if (!reply3[message.guild.id])
    reply3[message.guild.id] = {
      onoff: "Off"
    };
  if (reply3[message.guild.id].onoff === "Off") return;
  if (message.content === reply3[message.guild.id].msg) {
    message.channel.send(reply3[message.guild.id].reply);
  }
});

client.on("message", message => {
  if (message.content.startsWith(prefix + "autoreply1 on")) {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    reply[message.guild.id] = {
      onoff: "On"
    };
    message.channel.send(`**โ The AutoReply1 Is __๐๐__ !**`);
    fs.writeFile("./replys.json", JSON.stringify(reply), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});

client.on("message", message => {
  if (message.content.startsWith(prefix + "autoreply2 on")) {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    reply2[message.guild.id] = {
      onoff: "On"
    };
    message.channel.send(`**โ The AutoReply2 Is __๐๐__ !**`);
    fs.writeFile("./replys2.json", JSON.stringify(reply2), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "autoreply3 on")) {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    reply3[message.guild.id] = {
      onoff: "On"
    };
    message.channel.send(`**โ The AutoReply3 Is __๐๐__ !**`);
    fs.writeFile("./replys3.json", JSON.stringify(reply3), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});

client.on("message", message => {
  if (message.content.startsWith(prefix + "autoreply1 off")) {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    reply[message.guild.id] = {
      onoff: "Off"
    };
    message.channel.send(`**โ  The AutoReply1 Is __๐๐๐___ !**`);
    fs.writeFile("./replys.json", JSON.stringify(reply), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});

client.on("message", message => {
  if (message.content.startsWith(prefix + "autoreply2 off")) {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    reply2[message.guild.id] = {
      onoff: "Off"
    };
    message.channel.send(`**โ  The AutoReply2 Is __๐๐๐___ !**`);
    fs.writeFile("./replys2.json", JSON.stringify(reply2), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});
client.on("message", message => {
  if (message.content.startsWith(prefix + "autoreply3 off")) {
    if (!message.channel.guild) return;
    if (!message.member.hasPermission("MANAGE_GUILD"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `MANAGE_GUILD`"
      );
    reply3[message.guild.id] = {
      onoff: "Off"
    };
    message.channel.send(`**โ  The AutoReply3 Is __๐๐๐___ !**`);
    fs.writeFile("./replys3.json", JSON.stringify(reply3), err => {
      if (err)
        console.error(err).catch(err => {
          console.error(err);
        });
    });
  }
});
client.on("message", async message => {
  const prefix = "$"; /// ุญุท ุงูุจุฑููุณ ููุง

  let tbl = await db.fetch(`tBl_${message.author.id}`);
  if (tbl === "yes") return message.reply("You're Blacklisted !");

  if (message.author.bot) return;
  if (!message.guild) return;
  if (!message.content.startsWith(prefix)) return;

  const args = message.content
    .slice(prefix.length)
    .trim()
    .split(/ +/g);
  const cmd = args.shift().toLowerCase();

  if (cmd === "blacklist") {
    let user =
      message.mentions.users.first() || message.guild.members.get(args[0]);

    let tBl = await db.fetch(`tBl_${user.id}`);
    if (tBl === null) tBl = "no";

    if (!message.member.hasPermission("ADMINISTRATOR")) return;

    if (!user)
      return message.reply(
        `${"630249377621082124"} **- Please mention a user or give me user ID**`
      );
    db.set(`tBl_${user.id}`, "yes");
    message.channel.send(
      `${"666085646103871518"} **- Done, Succesfully blacklisted ${
        user.username
      }**`
    );
  }

  if (cmd === "unblacklist") {
    let user =
      message.mentions.users.first() || message.guild.members.get(args[0]);

    let tBl = await db.fetch(`tBl_${user.id}`);
    if (tBl === null) tBl = "no";

    if (!user)
      return message.reply(
        `${"630249377621082124"} **- Please mention a user or give me user ID**`
      );
    db.set(`tBl_${user.id}`, "no");
    message.channel.send(
      `${"666085646103871518"} **- Done, Succesfully unblacklisted ${
        user.username
      }**`
    );
  }

  if (cmd === "blt") {
    let tbl = await db.fetch(`tBl_${message.author.id}`);
    if (tbl === "yes") return message.reply("You're Blacklisted !");

    if (tbl === "no") return message.reply("You're not Blacklisted !");
  }
});
let emojiss = require("node-emoji"); //npm i node-emoji
client.on("message", msg => {
  let newemoji;
  let stringNew;
  let roleNew;
  if (msg.content.startsWith(`${prefix}setRole`)) {
    if (!msg.member.hasPermission("ADMINISTRATOR"))
      return msg.reply("you don't have permission").then(s => {
        s.delete(1600);
      });
    msg.reply("Mention The Channel Now").then(msgs => {
      const filter = response => response.author.id === msg.author.id;
      msg.channel
        .awaitMessages(filter, { maxMatches: 1, time: 30000, errors: ["time"] })
        .then(collected => {
          msg.delete();
          let idC = msg.guild.channels.find(
            c => c.id == collected.first().mentions.channels.first().id
          );
          if (!idC) return msgs.edit("Cant Find This Channel");
          idC = idC.id;
          msgs.edit(`${msg.author}, Write The Emoji You Want`);
          const filter = response => response.author.id === msg.author.id;
          msg.channel
            .awaitMessages(filter, {
              maxMatches: 1,
              time: 30000,
              errors: ["time"]
            })
            .then(collected => {
              if (!emojiss.hasEmoji(collected.first().mentions._content))
                return msgs.edit("ุงุฏุฎู ุงูููุฌู ุตุญูุญ !");
              newemoji = collected.first().mentions._content;
              msg.delete();
              msgs.edit(`${msg.author},  Mention The Role You Want`);
              const filter = response => response.author.id === msg.author.id;
              msg.channel
                .awaitMessages(filter, {
                  maxMatches: 1,
                  time: 30000,
                  errors: ["time"]
                })
                .then(collected => {
                  let roleW = collected.first().mentions.roles.first();
                  if (!roleW) {
                    let embed = new Discord.RichEmbed()
                      .setColor("#42f4f4")
                      .setTitle(`:x: - Mention The Role `);
                    msg.reply(embed).then(z => z.delete(3000));
                    return;
                  }
                  let role = msg.guild.roles.find(`name`, roleW.name);
                  if (!role) {
                    let embed = new Discord.RichEmbed()
                      .setColor("#42f4f4")
                      .setTitle(`:x: - Could't find \`${roleW.name}\` role.`);
                    msg.reply(embed).then(msgs => msgs.delete(3000));
                    return;
                  }
                  roleNew = role;
                  msgs.edit(`${msg.author}, Write The Message`);
                  const filter = response =>
                    response.author.id === msg.author.id;
                  msg.channel
                    .awaitMessages(filter, {
                      maxMatches: 1,
                      time: 30000,
                      errors: ["time"]
                    })
                    .then(collected => {
                      stringNew = collected.first().mentions._content;
                      let channel = msg.guild.channels.get(idC);
                      if (!channel) {
                        let embed = new Discord.RichEmbed()
                          .setColor("#42f4f4")
                          .setTitle(`:x: - Could't find \`${idC}\` Channel.`);
                        msg.reply(embed).then(msgs => msgs.delete(3000));
                        return;
                      }
                      channel.bulkDelete(100);
                      channel
                        .send(
                          `@here || @everyone
${msg.guild.name}ยฉ :arrow_down:

${stringNew}
`
                        )
                        .then(msgA => {
                          msgA.react(newemoji).then(() => {
                            const Ac = (reaction, user) =>
                              reaction.emoji.name === newemoji && !user.bot;
                            const Acc = msgA.createReactionCollector(Ac, {
                              time: 120000
                            });
                            Acc.on("collect", r => {
                              let member = msg.guild.members.get(
                                r.users.last().id
                              );
                              if (!member) return;
                              r.remove(member.user);
                              if (
                                member.roles.find(r => r.name == roleNew.name)
                              )
                                return;
                              member.addRole(roleNew);
                              channel
                                .send(`${member.user}, Done Activated !`)
                                .then(z => z.delete(1500));
                            });
                          });
                        });
                    })
                    .catch(e => {
                      console.log(e.message);
                    });
                })
                .catch(e => {
                  console.log(e.message);
                });
            })
            .catch(e => {
              console.log(e.message);
            });
        })
        .catch(e => {
          console.log(e.message);
        });
    });
  }
});
client.on("message", async message => {
  if (message.content === "$unbanall") {
    var user = message.mentions.users.first();
    if (!message.member.hasPermission("ADMINISTRATOR"))
      return message.channel.send(
        "โ|**`ADMINISTRATOR`ูุง ุชูุฌุฏ ูุฏูู ุตูุงุญูุฉ `**"
      );
    if (!message.guild.member(client.user).hasPermission("BAN_MEMBERS"))
      return message.reply("**I Don't Have ` BAN_MEMBERS ` Permission**");
    const guild = message.guild;

    message.guild.fetchBans().then(ba => {
      ba.forEach(ns => {
        message.guild.unban(ns);
        const embed = new Discord.RichEmbed()
          .setColor("RANDOM")
          .setAuthor(
            "Succes!",
            "https://images-ext-1.discordapp.net/external/vp2vj9m0ieU5J6SHg6ObIsGpTJyoZnGAebrd0_vi848/https/i.imgur.com/GnR2unD.png?width=455&height=455"
          )
          .setDescription(`**:white_check_mark: Has Been Unban For All**`)
          .setFooter(
            "Requested by " + message.author.username,
            message.author.avatarURL
          );
        message.channel.sendEmbed(embed);
        guild.owner.send(`Server : ${guild.name}
  **Everyone was unbanned by** : <@${message.author.id}>`);
      });
    });
  }
});

client.on("message", message => {
  var command = message.content.toLowerCase().split(" ")[0];
  var args = message.content.toLowerCase().split(" ");
  var userM = message.mentions.users.first();
  if (command == prefix + "unban") {
    if (!message.member.hasPermission("BAN_MEMBERS"))
      return message.channel.send(
        ":no_entry: | You dont have **BAN_MEMBERS** Permission!"
      );
    if (!message.guild.member(client.user).hasPermission("BAN_MEMBERS"))
      return message.channel.send(
        ":no_entry: | I dont have **BAN_MEMBERS** Permission!"
      );
    if (!args[1])
      return message.channel.send(":no_entry: | Please type the ID of user");
    if (args[1].length < 16)
      return message.reply(":no_entry: | This ID is not id user!");
    message.guild.fetchBans().then(bans => {
      var Found = bans.find(m => m.id === args[1]);
      if (!Found)
        return message.channel.send(
          `:no_entry: | <@${message.author.id}> This preson not have any ban from this server! :unlock:`
        );
      message.guild.unban(args[1]);
      message.channel.send(
        `:white_check_mark: Successfully \`\`UNBANNED\`\` <@${
          args[1]
        }> From the server!`
      );
    });
client.on("message", async message => {
  if (message.content.startsWith(prefix + "banslist")) {
  }
});
   if (!message.guild) return;
    if (!message.member.hasPermission("BAN_MEMBERS"))
      return message.channel.send(
        "**Sorry But You Dont Have Permission** `BAN_MEMBERS`"
      );
    message.guild.fetchBans().then(bans => {
      let b = bans.size;
      let bb = bans.map(a => `${a}`).join(" - ");
      message.channel.send(`**\`${b}\` | ${bb}**`);
    });
  }
});
client.on('guildMemberUpdate', (ninja, ot,) => {
if(ninja.roles.size < ot.roles.size) {
 let role = ot.roles.filter(r => !ninja.roles.has(r.id)).first();
            let embed = new Discord.RichEmbed()
            .setThumbnail(ninja.guild.iconURL)
            .setColor('RANDOM')
            .setDescription(`
**New Role**
 
**โจ Role Name:** ( ${role.name} )
 
**๐ Server:** ${ot.guild.name}`)
            .setTimestamp()
           .setFooter(`๐ฐ Guild ID : ${ninja.guild.id}`) 
            ot.user.send(embed); 
}
});
client.login("NjM3NzU3OTI4NjczMjQ3MjYy.Xn4lxw.8xLimyskvCdYK2ITVIX7AaBO7EE")